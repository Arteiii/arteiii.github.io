"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[5887],{8821:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var s=t(4848),i=t(8453);const l={sidebar_position:14},r="Lists & Tupels",o={id:"python/lists_tupels",title:"Lists & Tupels",description:"Stack",source:"@site/docs/python/lists_tupels.md",sourceDirName:"python",slug:"/python/lists_tupels",permalink:"/docs/python/lists_tupels",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/lists_tupels.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"docsSidebar",previous:{title:"Recursive Functions",permalink:"/docs/python/recursive_functions"},next:{title:"Modularization",permalink:"/docs/python/modularization"}},a={},d=[{value:"Stack",id:"stack",level:2},{value:"Stacks In Python",id:"stacks-in-python",level:2},{value:"Extend",id:"extend",level:2},{value:"&quot;+&quot; Operator",id:"-operator",level:2},{value:"Remove a Value",id:"remove-a-value",level:2},{value:"Count",id:"count",level:2},{value:"Position",id:"position",level:2},{value:"Insert",id:"insert",level:2},{value:"Tupels",id:"tupels",level:2},{value:"Empty tuples",id:"empty-tuples",level:3},{value:"Single Digit Tuples",id:"single-digit-tuples",level:3},{value:"Packing &amp; Unpacking",id:"packing--unpacking",level:3},{value:"Unchangeable?",id:"unchangeable",level:2},{value:"Sort Lists",id:"sort-lists",level:2},{value:".sort",id:"sort",level:3},{value:"sorted",id:"sorted",level:3},{value:"reverse",id:"reverse",level:3},{value:"Own Sorting Function",id:"own-sorting-function",level:3},{value:"itemgetter",id:"itemgetter",level:3}];function c(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"lists--tupels",children:"Lists & Tupels"})}),"\n",(0,s.jsx)(n.h2,{id:"stack",children:"Stack"}),"\n",(0,s.jsxs)(n.p,{children:['a "stack" essentially has 2 functions',(0,s.jsx)(n.br,{}),"\n","one with which you can put something on the stack",(0,s.jsx)(n.br,{}),"\n","and one to remove something from the top level of a stack"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"method"}),(0,s.jsx)(n.th,{children:"meaning"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"push"}),(0,s.jsxs)(n.td,{children:['adds something "on top" to the stack python does not have a function called push but ',(0,s.jsx)(n.strong,{children:"append"})," performs the same functionality"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"pop"}),(0,s.jsx)(n.td,{children:"return the top object of the stack, removing it in the process"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"peek"}),(0,s.jsx)(n.td,{children:'allows you to read the "top" value without removing it as with pop'})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"stacks-in-python",children:"Stacks In Python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["s.append(x)","\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Add an item to the end of the list."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["s.pop(i)","\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"prints the i-th element of an lsite and removes it in the process"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["s.pop()","\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"If i is not specified, the last object is used"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"colors = [\"red\", \"green\"]\ncolors.append(\"blue\")\ncolors\n# ['red', 'green', 'blue']\n\nc = colors.pop()\nc\n# 'blue'\n\ncolors.append(colors.pop())\ncolors\n# ['red', 'green']\n"})}),"\n",(0,s.jsx)(n.h2,{id:"extend",children:"Extend"}),"\n",(0,s.jsx)(n.p,{children:"extend is used to append multiple elements to a list"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"s.extend(t)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"t must be an iterable object"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"fib = [0, 1, 1, 2, 3, 5]\nfib.extend([8, 13, 21])\nfib\n# [0, 1, 1, 2, 3, 5, 8, 13, 21]\n"})}),"\n",(0,s.jsx)(n.p,{children:"if you pass a string it will be split into its individual letters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"list1 = []\nlist1.extend(\"Test123\")\nlist1\n# ['T', 'e', 's', 't', '1', '2', '3']\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-operator",children:'"+" Operator'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"bli = [4, 2]\nbli = bli + [123]\nbli\n# [4, 2, 123]\n"})}),"\n",(0,s.jsx)(n.p,{children:"this method is also possible but much slower than the append method"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"bli = [4, 2]\nbli += [123]\nbli\n# [4, 2, 123]\n"})}),"\n",(0,s.jsx)(n.p,{children:"this is better, but still not as fast as the append method"}),"\n",(0,s.jsx)(n.h2,{id:"remove-a-value",children:"Remove a Value"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"s.remove(x)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"with remove the first occurrence of the value x can be removed"}),"\n",(0,s.jsx)(n.p,{children:"if x is not present a ValueError is generated"}),"\n",(0,s.jsx)(n.h2,{id:"count",children:"Count"}),"\n",(0,s.jsx)(n.p,{children:"if you want to count how many times an element is included in a list you can use .count"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"bli = [4, 2, 123, 4, 2, 2, 2, 42]\nbli.count(2)\n# 4\n\nbli.count(123)\n#1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"position",children:"Position"}),"\n",(0,s.jsx)(n.p,{children:"with index you get the position of an element within a list"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"s.index(x[ , i [, j ] ] )"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["the index for the x is determined",(0,s.jsx)(n.br,{}),"\n","if the parameter i is given the search starts at this position and ends at j"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'bli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nbli.index(1)\n# 0\n\nbli.index(10 , 8)\n# 9\n\nbli.index(10 , 6, 8)\n# Traceback (most recent call last):\n#   File "<stdin>", line 1, in <module>\n# ValueError: 10 is not in list\n'})}),"\n",(0,s.jsx)(n.h2,{id:"insert",children:"Insert"}),"\n",(0,s.jsx)(n.p,{children:"with append you can append an element to the end of a list but with insert you can insert an element at any place you want"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"s.insert(index, object)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"bli = [1, 2, 3, 4, 5, 6, 7]\nbli.insert(1, 42)\nbli\n#[1, 42, 2, 3, 4, 5, 6, 7]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"tupels",children:"Tupels"}),"\n",(0,s.jsx)(n.p,{children:"as we already know tuples are immutable\nmeans methods like append, insert , pop...\ndo not exist/work"}),"\n",(0,s.jsx)(n.h3,{id:"empty-tuples",children:"Empty tuples"}),"\n",(0,s.jsx)(n.p,{children:"empty tuples can be defined with an empty bracket"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"t = ()\ntype(t)\n# <class 'tuple'>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"single-digit-tuples",children:"Single Digit Tuples"}),"\n",(0,s.jsx)(n.p,{children:"let's try to define a tuple with only one element"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"t = (1)\ntype(t)\n# <class 'int'>\n"})}),"\n",(0,s.jsx)(n.p,{children:"does not look good but works"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"t = (1,)\ntype(t)\n# <class 'tuple'>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"packing--unpacking",children:"Packing & Unpacking"}),"\n",(0,s.jsx)(n.p,{children:"another option to define a tuple goes like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'f = "test", "test123"\ntype(f)\n# <class \'tuple\'>\n'})}),"\n",(0,s.jsx)(n.p,{children:"it is called tuple unpacking when you assign the individual values of a tuple to variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"(first, second) = f\nprint(first, second)\n# test test123\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"(first, *everything_else) = 1, 2, 3, 42, 123\nprint(first)\n# 1\n\nprint(everything_else)\n# [2, 3, 42, 123]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"unchangeable",children:"Unchangeable?"}),"\n",(0,s.jsxs)(n.p,{children:["tuples cannot be modified",(0,s.jsx)(n.br,{}),"\n","but we can edit objects like lists",(0,s.jsx)(n.br,{}),"\n","because the tuple only contains a pointer to this list"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"test = ([],)\ntest[0].append(\"bli bla\")\ntest\n# (['bli bla'],)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"sort-lists",children:"Sort Lists"}),"\n",(0,s.jsx)(n.h3,{id:"sort",children:".sort"}),"\n",(0,s.jsx)(n.p,{children:".sort will sort the list inplace"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"test123 = [42, 123, 2, 1, 4, 3,]\ntest123.sort()\ntest123\n# [1, 2, 3, 4, 42, 123]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sorted",children:"sorted"}),"\n",(0,s.jsx)(n.p,{children:"sorted returns a sorted list and the original list remains unchanged"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"test123 = [42, 123, 2, 1, 4, 3,]\ntest = sorted(test123)\ntest123\n# [42, 123, 2, 1, 4, 3]\n\ntest\n# [1, 2, 3, 4, 42, 123]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"reverse",children:"reverse"}),"\n",(0,s.jsx)(n.p,{children:"to reverse the sort order set the parameter reverse to True (reverse=True)"}),"\n",(0,s.jsx)(n.p,{children:"this works for .sort and sorted"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"test123 = [42, 123, 2, 1, 4, 3,]\ntest = sorted(test123, reverse=True)\ntest\n# [123, 42, 4, 3, 2, 1]\n\ntest123.sort(reverse=True)\ntest123\n# [123, 42, 4, 3, 2, 1]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"own-sorting-function",children:"Own Sorting Function"}),"\n",(0,s.jsx)(n.p,{children:"if you don't want to sort a list by the standard order relation you can use the parameter key"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"test = [\"Green\", \"yellow\", \"blue\", \"Black\", \"red\"]\nsorted(test)\n# ['Black', 'Green', 'blue', 'red', 'yellow']\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"test = [\"Green\", \"yellow\", \"blue\", \"Black\", \"red\"]\nsorted(test, key=str.lower)\n# ['Black', 'blue', 'Green', 'red', 'yellow']\n"})}),"\n",(0,s.jsx)(n.h3,{id:"itemgetter",children:"itemgetter"}),"\n",(0,s.jsx)(n.p,{children:"if you want to sort lists containing tuples you can use itemgetter"}),"\n",(0,s.jsx)(n.p,{children:"sort by the 0-th index:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"from operator import itemgetter\n\ntest123 = [(\"John\", \"Doe\", \"1337\"),\n            (\"Maria\", \"Sigibert\", \"1230\"),\n            (\"Folcmar\", \"Kester\", \"4200\"),]\n\nsorted(test123, key=itemgetter(0))\n# [('Folcmar', 'Kester', '4200'),\n#  ('John', 'Doe', '1337'),\n#  ('Maria', 'Sigibert', '1230')]\n"})}),"\n",(0,s.jsx)(n.p,{children:"sort after the first index:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"sorted(test123, key=itemgetter(1))\n# [('John', 'Doe', '1337'),\n# ('Folcmar', 'Kester', '4200'),\n# ('Maria', 'Sigibert', '1230')]\n"})}),"\n",(0,s.jsx)(n.p,{children:"sort after the second index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"sorted(test123, key=itemgetter(2))\n# [('John', 'Doe', '1337'),\n#  ('Maria', 'Sigibert', '1230'),\n#  ('Folcmar', 'Kester', '4200')]\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},l=s.createContext(i);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);