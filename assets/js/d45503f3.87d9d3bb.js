"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[3519],{1599:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=a(4848),t=a(8453);const s={sidebar_position:1},r="Variables",l={id:"python/datatypes_variables",title:"Variables",description:"In Python, variables serve as symbolic names for values or objects in your program.",source:"@site/docs/python/datatypes_variables.md",sourceDirName:"python",slug:"/python/datatypes_variables",permalink:"/docs/python/datatypes_variables",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/datatypes_variables.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Python",permalink:"/docs/python/"},next:{title:"Datatypes",permalink:"/docs/python/data_types"}},o={},c=[{value:"Variable Assignment",id:"variable-assignment",level:2},{value:"Outputting the Value of a Variable",id:"outputting-the-value-of-a-variable",level:2},{value:"Understanding Object Identity",id:"understanding-object-identity",level:2},{value:"Modifying Variables",id:"modifying-variables",level:2},{value:"Static &amp; Dynamic Type Declarations",id:"static--dynamic-type-declarations",level:2},{value:"Variable Immutability",id:"variable-immutability",level:3},{value:"Variable Types",id:"variable-types",level:3},{value:"Scope of Variables",id:"scope-of-variables",level:3},{value:"Type Declarations in Python",id:"type-declarations-in-python",level:2},{value:"Variable names",id:"variable-names",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"variables",children:"Variables"})}),"\n",(0,i.jsxs)(n.p,{children:["In Python, variables serve as symbolic names for values or objects in your program.",(0,i.jsx)(n.br,{}),"\n","They allow you to store and manipulate data easily."]}),"\n",(0,i.jsx)(n.h2,{id:"variable-assignment",children:"Variable Assignment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"x = 42\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, we define a variable x and assign it the value 42.",(0,i.jsx)(n.br,{}),"\n",'The "=" sign is used for assignment, representing a non-mathematical equals sign.']}),"\n",(0,i.jsx)(n.h2,{id:"outputting-the-value-of-a-variable",children:"Outputting the Value of a Variable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"print('value of x:', x)\n# value of x: 42\n"})}),"\n",(0,i.jsx)(n.p,{children:"We use the print function to display the value of x."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-object-identity",children:"Understanding Object Identity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"xstring = 'stringx'\nystring = 'stringy'\n\nprint('id of stringx:', id(xstring))\n# Output: id of stringx: 140395292848112\n\nprint('id of stringy:', id(ystring))\n# Output: id of stringy: 140395290122992\n\nystring = xstring\n\nprint('id of string x after it has been set to the value of x:', id(ystring))\n# Output: id of stringx after it has been set to the value of x: 140395292848112\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Variables are references to objects.",(0,i.jsx)(n.br,{}),"\n","Here, we show that variables can point to the same object.",(0,i.jsx)(n.br,{}),"\n","The id() function returns the unique identifier of an object, allowing us to observe the identity of variables."]}),"\n",(0,i.jsx)(n.h2,{id:"modifying-variables",children:"Modifying Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"x = x + 36\n# Alternative: x += 36\nprint(x)\n# Output: 78\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Variables can be modified using various operators like "+", "-", "*", "/", "**" (exponentiation), "//" (integer division), and "%" (modulo).',(0,i.jsx)(n.br,{}),"\n","Here, we demonstrate incrementing the value of x."]}),"\n",(0,i.jsx)(n.h2,{id:"static--dynamic-type-declarations",children:"Static & Dynamic Type Declarations"}),"\n",(0,i.jsx)(n.h3,{id:"variable-immutability",children:"Variable Immutability"}),"\n",(0,i.jsxs)(n.p,{children:["In Python, certain types of variables, like strings and tuples, are immutable. Once assigned, their values cannot be changed.",(0,i.jsx)(n.br,{}),"\n","This ensures data integrity and stability, particularly in scenarios where constant values are crucial."]}),"\n",(0,i.jsx)(n.h3,{id:"variable-types",children:"Variable Types"}),"\n",(0,i.jsxs)(n.p,{children:["Python is a dynamically-typed language, meaning variable types are assigned at runtime.",(0,i.jsx)(n.br,{}),"\n","The type of a variable can be determined using the ",(0,i.jsx)(n.code,{children:"type()"})," function."]}),"\n",(0,i.jsx)(n.h3,{id:"scope-of-variables",children:"Scope of Variables"}),"\n",(0,i.jsxs)(n.p,{children:["Variables have a scope, which defines where they can be accessed or modified.",(0,i.jsx)(n.br,{}),"\n","Understanding variable scope is essential to avoid unexpected behavior in your code."]}),"\n",(0,i.jsx)(n.h2,{id:"type-declarations-in-python",children:"Type Declarations in Python"}),"\n",(0,i.jsxs)(n.p,{children:["In statically-typed languages like C, variable types must be declared explicitly.",(0,i.jsx)(n.br,{}),"\n","For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"int i, j;\nfloat x;\n\nx = i /3.0 +5.8;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Later, the values for i, j, and x can change, but not the type.",(0,i.jsx)(n.br,{}),"\n",'This is known as "static type declaration"']}),"\n",(0,i.jsx)(n.p,{children:"In Python, it's different because variables don't need explicit type declarations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"i = 123\n"})}),"\n",(0,i.jsxs)(n.p,{children:["An object with the type int is created automatically.",(0,i.jsx)(n.br,{}),"\n","However, this type can change during the program run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"i = 'Hello World!'\ni = [1, 2, 3]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Python assigns a special type/class to the object in each case, detecting the data type dynamically even while the program is running.",(0,i.jsx)(n.br,{}),"\n",'This is known as "dynamic type declaration."']}),"\n",(0,i.jsx)(n.p,{children:"You can use the type() function to display the type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"i = 123\ntype(i)\n# <class 'int'>\n\ni = 'Hello World!'\ntype(i)\n# <class 'str'>\n\ni = [3, 6, 9]\ntype(i)\n# <class 'list'>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, type conflicts can occur.",(0,i.jsx)(n.br,{}),"\n","For example, if you try to add a variable of type int with a variable of type str, a TypeError is generated:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"x = 'string'\ny = 123\nz = x + y\n# TypeError: can only concatenate str (not \"int\") to str\n"})}),"\n",(0,i.jsx)(n.p,{children:"But you can mix integer and float values, and the value of the expression becomes a float:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"x = 12\ny = 3.5\nz = x * y\nz\n# 42.0\n\ntype(x)\n# <class 'int'>\ntype(y)\n# <class 'float'>\ntype(z)\n# <class 'float'>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"variable-names",children:"Variable names"}),"\n",(0,i.jsxs)(n.p,{children:["Variables in Python must start with a letter or an underscore (_).",(0,i.jsx)(n.br,{}),"\n","They are case-sensitive, meaning that the case must be respected:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"Test_42 = 'Test42'\ntest_42 = 'test42 but lower case'\n\nprint(Test_42)\n# Test42\n\nprint(test_42)\n# test42 but lower case\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var i=a(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);