"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[7914],{722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=n(4848),r=n(8453),i=n(3514);const o={sidebar_position:1,sidebar_label:"Assembly"},a="Introduction to Assembly Language Programming",l={id:"cheatsheets/Assembly/index",title:"Introduction to Assembly Language Programming",description:"Assembly language is a low-level programming language that closely corresponds to the architecture of a computer's central processing unit (CPU). Unlike high-level languages, such as C++ or Python, which are designed for human readability and abstraction, assembly language provides a direct interface with the computer's hardware.",source:"@site/docs/cheatsheets/Assembly/index.mdx",sourceDirName:"cheatsheets/Assembly",slug:"/cheatsheets/Assembly/",permalink:"/docs/cheatsheets/Assembly/",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/cheatsheets/Assembly/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Assembly"},sidebar:"docsSidebar",previous:{title:"CheatSheet",permalink:"/docs/cheatsheets/"},next:{title:"x86-64",permalink:"/docs/cheatsheets/Assembly/x86-64"}},c={},d=[{value:"Key Concepts",id:"key-concepts",level:2},{value:"Registers",id:"registers",level:3},{value:"Instructions",id:"instructions",level:3},{value:"Memory Access",id:"memory-access",level:3},{value:"Condition Codes",id:"condition-codes",level:3},{value:"Control Flow",id:"control-flow",level:3},{value:"Example",id:"example",level:2},{value:"Architectures",id:"architectures",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"introduction-to-assembly-language-programming",children:"Introduction to Assembly Language Programming"})}),"\n",(0,s.jsx)(t.p,{children:"Assembly language is a low-level programming language that closely corresponds to the architecture of a computer's central processing unit (CPU). Unlike high-level languages, such as C++ or Python, which are designed for human readability and abstraction, assembly language provides a direct interface with the computer's hardware."}),"\n",(0,s.jsx)(t.p,{children:"In assembly language, programs are written using symbolic representations of the machine instructions executed by the CPU. Each assembly instruction corresponds to a specific operation at the hardware level, making it a powerful tool for understanding and controlling a computer's behavior."}),"\n",(0,s.jsx)(t.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(t.h3,{id:"registers",children:"Registers"}),"\n",(0,s.jsx)(t.p,{children:"Assembly language relies heavily on registers, which are small, fast storage locations within the CPU. Registers store data temporarily during program execution."}),"\n",(0,s.jsx)(t.h3,{id:"instructions",children:"Instructions"}),"\n",(0,s.jsx)(t.p,{children:"Assembly instructions are mnemonics that represent specific operations. Examples include MOV (move data), ADD (addition), and JMP (jump to a different part of the program)."}),"\n",(0,s.jsx)(t.h3,{id:"memory-access",children:"Memory Access"}),"\n",(0,s.jsx)(t.p,{children:"Assembly language allows direct manipulation of memory. Operations like loading data from memory (MOV), storing data to memory (MOV), and accessing specific memory addresses are fundamental."}),"\n",(0,s.jsx)(t.h3,{id:"condition-codes",children:"Condition Codes"}),"\n",(0,s.jsx)(t.p,{children:"Flags or condition codes indicate the status of the CPU after an operation. Common flags include zero, carry, and overflow flags."}),"\n",(0,s.jsx)(t.h3,{id:"control-flow",children:"Control Flow"}),"\n",(0,s.jsx)(t.p,{children:"Control flow instructions, such as jumps (JMP) and branches (JZ - jump if zero), determine the flow of execution based on specific conditions."}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-asm6502",children:"section .data\n    msg db 'Hello, Assembly World!',0\n\nsection .text\n    global _start\n\n_start:\n    ; Write the message to standard output\n    mov eax, 4            ; system call for sys_write\n    mov ebx, 1            ; file descriptor 1 (stdout)\n    mov ecx, msg          ; pointer to the message\n    mov edx, 23           ; message length\n    int 0x80              ; call kernel\n\n    ; Exit the program\n    mov eax, 1            ; system call for sys_exit\n    xor ebx, ebx          ; exit code 0\n    int 0x80              ; call kernel\n"})}),"\n",(0,s.jsx)(t.p,{children:'This simple example prints "Hello, Assembly World!" to the console and exits. Each line corresponds to a specific assembly instruction, providing a glimpse into the direct interaction between the program and the underlying hardware.'}),"\n",(0,s.jsx)(t.h2,{id:"architectures",children:"Architectures"}),"\n","\n",(0,s.jsx)(i.A,{})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},3514:(e,t,n)=>{n.d(t,{A:()=>y});n(6540);var s=n(4164),r=n(6972),i=n(8774),o=n(5846),a=n(6654),l=n(1312),c=n(1107);const d={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var u=n(4848);function h(e){let{href:t,children:n}=e;return(0,u.jsx)(i.A,{href:t,className:(0,s.A)("card padding--lg",d.cardContainer),children:n})}function m(e){let{href:t,icon:n,title:r,description:i}=e;return(0,u.jsxs)(h,{href:t,children:[(0,u.jsxs)(c.A,{as:"h2",className:(0,s.A)("text--truncate",d.cardTitle),title:r,children:[n," ",r]}),i&&(0,u.jsx)("p",{className:(0,s.A)("text--truncate",d.cardDescription),title:i,children:i})]})}function p(e){let{item:t}=e;const n=(0,r.Nr)(t),s=function(){const{selectMessage:e}=(0,o.W)();return t=>e(t,(0,l.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t}))}();return n?(0,u.jsx)(m,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??s(t.items.length)}):null}function g(e){let{item:t}=e;const n=(0,a.A)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",s=(0,r.cC)(t.docId??void 0);return(0,u.jsx)(m,{href:t.href,icon:n,title:t.label,description:t.description??s?.description})}function f(e){let{item:t}=e;switch(t.type){case"link":return(0,u.jsx)(g,{item:t});case"category":return(0,u.jsx)(p,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function x(e){let{className:t}=e;const n=(0,r.$S)();return(0,u.jsx)(y,{items:n.items,className:t})}function y(e){const{items:t,className:n}=e;if(!t)return(0,u.jsx)(x,{...e});const i=(0,r.d1)(t);return(0,u.jsx)("section",{className:(0,s.A)("row",n),children:i.map(((e,t)=>(0,u.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,u.jsx)(f,{item:e})},t)))})}},5846:(e,t,n)=>{n.d(t,{W:()=>c});var s=n(6540),r=n(4586);const i=["zero","one","two","few","many","other"];function o(e){return i.filter((t=>e.includes(t)))}const a={locale:"en",pluralForms:o(["one","other"]),select:e=>1===e?"one":"other"};function l(){const{i18n:{currentLocale:e}}=(0,r.A)();return(0,s.useMemo)((()=>{try{return function(e){const t=new Intl.PluralRules(e);return{locale:e,pluralForms:o(t.resolvedOptions().pluralCategories),select:e=>t.select(e)}}(e)}catch(t){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${t.message}\n`),a}}),[e])}function c(){const e=l();return{selectMessage:(t,n)=>function(e,t,n){const s=e.split("|");if(1===s.length)return s[0];s.length>n.pluralForms.length&&console.error(`For locale=${n.locale}, a maximum of ${n.pluralForms.length} plural forms are expected (${n.pluralForms.join(",")}), but the message contains ${s.length}: ${e}`);const r=n.select(t),i=n.pluralForms.indexOf(r);return s[Math.min(i,s.length-1)]}(n,t,e)}}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);