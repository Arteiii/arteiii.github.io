"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[8030],{6172:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var t=s(4848),r=s(8453);const a={id:"range",title:"Range",sidebar_position:1},d="Range",l={id:"datatypes/standard-library/ranges-iterators/range",title:"Range",description:"std::Range",source:"@site/rust-cookbook/datatypes/standard-library/ranges-iterators/range.md",sourceDirName:"datatypes/standard-library/ranges-iterators",slug:"/datatypes/standard-library/ranges-iterators/range",permalink:"/rust-cookbook/datatypes/standard-library/ranges-iterators/range",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"range",title:"Range",sidebar_position:1},sidebar:"rustCookbookSidebar",previous:{title:"Ranges and Iterators",permalink:"/rust-cookbook/datatypes/standard-library/ranges-iterators/"},next:{title:"Logging",permalink:"/rust-cookbook/logging"}},i={},o=[{value:"Types of Ranges",id:"types-of-ranges",level:2},{value:"Range: Exclusive Range",id:"range-exclusive-range",level:3},{value:"RangeInclusive: Inclusive Range",id:"rangeinclusive-inclusive-range",level:3},{value:"RangeFrom: Unbounded Range (From a start)",id:"rangefrom-unbounded-range-from-a-start",level:3},{value:"RangeTo: Unbounded Range (Up to a point)",id:"rangeto-unbounded-range-up-to-a-point",level:3},{value:"RangeToInclusive: Unbounded Range (Up to and including)",id:"rangetoinclusive-unbounded-range-up-to-and-including",level:3},{value:"RangeFull: Full Range",id:"rangefull-full-range",level:3},{value:"Traits and Methods",id:"traits-and-methods",level:2},{value:"Iterator\xa0 Trait",id:"iterator-trait",level:3},{value:"contains\xa0 Method",id:"contains-method",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"range",children:"Range"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html",children:(0,t.jsx)(n.code,{children:"std::ops::Range"})})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html",children:(0,t.jsx)(n.code,{children:"Range"})})," type in Rust represents an interval over a continuous sequence of values, typically numbers,\nbut can work with any type that implements the ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html",children:(0,t.jsx)(n.code,{children:"PartialOrd"})})," and ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/iter/trait.Step.html",children:(0,t.jsx)(n.code,{children:"Step"})})," traits (like ",(0,t.jsxs)(n.a,{href:"https://doc.rust-lang.org/std/primitive.char.html",children:["\n",(0,t.jsx)(n.code,{children:"char"})]})," for example).\nRanges are used to iterate over a series of values or to define boundaries for slices and other operations."]}),"\n",(0,t.jsx)(n.p,{children:"Ranges are most commonly used in loops and indexing operations,\nand Rust provides multiple forms of ranges depending on the inclusivity or exclusivity of the endpoints."}),"\n",(0,t.jsx)(n.h2,{id:"types-of-ranges",children:"Types of Ranges"}),"\n",(0,t.jsx)(n.p,{children:"Rust provides several range types, each represented by a distinct syntax:"}),"\n",(0,t.jsxs)(n.h3,{id:"range-exclusive-range",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html",children:(0,t.jsx)(n.code,{children:"Range"})}),": Exclusive Range"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"start..end\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html",children:(0,t.jsx)(n.code,{children:"Range"})})," type represents a half-open interval ",(0,t.jsx)(n.code,{children:"[start, end)"}),".\nIt starts at ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.start",children:(0,t.jsx)(n.code,{children:"start"})})," (inclusive) and goes up to, but does not include, ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end",children:(0,t.jsx)(n.code,{children:"end"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'for i in 0..5 {\n    println!("{}", i);  // prints 0, 1, 2, 3, 4\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"rangeinclusive-inclusive-range",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html",children:(0,t.jsx)(n.code,{children:"RangeInclusive"})}),": Inclusive Range"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"start..=end\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This range includes both the ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.start",children:(0,t.jsx)(n.code,{children:"start"})})," and ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end",children:(0,t.jsx)(n.code,{children:"end"})})," values.\nIt represents a fully-closed interval ",(0,t.jsx)(n.code,{children:"[start, end]"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'for i in 0..=5 {\n    println!("{}", i);  // prints 0, 1, 2, 3, 4, 5\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"rangefrom-unbounded-range-from-a-start",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html",children:(0,t.jsx)(n.code,{children:"RangeFrom"})}),": Unbounded Range (From a start)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"start..\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This range starts at ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.start",children:(0,t.jsx)(n.code,{children:"start"})})," and continues indefinitely.\nIt is useful for slicing when you want to include everything after a certain index."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let array = [1, 2, 3, 4, 5];\nlet slice = &array[2..];  // takes from index 2 to the end\nassert_eq!(slice, &[3, 4, 5]);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"rangeto-unbounded-range-up-to-a-point",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeTo.html",children:(0,t.jsx)(n.code,{children:"RangeTo"})}),": Unbounded Range (Up to a point)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"..end\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This range starts from the beginning and ends before ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end",children:(0,t.jsx)(n.code,{children:"end"})}),". It is exclusive,\nmeaning it does not include ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end",children:(0,t.jsx)(n.code,{children:"end"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let array = [1, 2, 3, 4, 5];\nlet slice = &array[..3];  // takes up to (but not including) index 3\nassert_eq!(slice, &[1, 2, 3]);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"rangetoinclusive-unbounded-range-up-to-and-including",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html",children:(0,t.jsx)(n.code,{children:"RangeToInclusive"})}),": Unbounded Range (Up to and including)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"..=end\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is similar to ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeTo.html",children:(0,t.jsx)(n.code,{children:"RangeTo"})}),", but it includes the ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end",children:(0,t.jsx)(n.code,{children:"end"})})," value as well."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let array = [1, 2, 3, 4, 5];\nlet slice = &array[..=3];  // takes up to and including index 3\nassert_eq!(slice, &[1, 2, 3, 4]);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"rangefull-full-range",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeFull.html",children:(0,t.jsx)(n.code,{children:"RangeFull"})}),": Full Range"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"..\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.RangeFull.html",children:(0,t.jsx)(n.code,{children:"RangeFull"})})," type is used when referring to the entire range of a collection.\nIt is most often used in slicing."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let array = [1, 2, 3, 4, 5];\nlet slice = &array[..];  // takes the entire array\nassert_eq!(slice, &[1, 2, 3, 4, 5]);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"traits-and-methods",children:"Traits and Methods"}),"\n",(0,t.jsxs)(n.h3,{id:"iterator-trait",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html#impl-Iterator-for-Range%3CA%3E",children:(0,t.jsx)(n.code,{children:"Iterator"})}),"\xa0 Trait"]}),"\n",(0,t.jsxs)(n.p,{children:["All finite ranges implement the ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html#impl-Iterator-for-Range%3CA%3E",children:(0,t.jsx)(n.code,{children:"Iterator"})})," trait, making it easy to loop over them."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let sum: i32 = (1..5).sum();  // sums 1, 2, 3, 4\nassert_eq!(sum, 10);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"contains-method",children:[(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains",children:(0,t.jsx)(n.code,{children:"contains"})}),"\xa0 Method"]}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.a,{href:"https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains",children:(0,t.jsx)(n.code,{children:"contains"})})," method to check whether a value is within a range."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let range = 1..5;\nassert!(range.contains(&3));  // true\nassert!(!range.contains(&5)); // false (because it's exclusive)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var t=s(6540);const r={},a=t.createContext(r);function d(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);