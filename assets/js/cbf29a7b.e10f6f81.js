"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[9857],{8697:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});var r=a(4848),i=a(8453);const t={sidebar_position:12},l="Functions",s={id:"python/functions",title:"Functions",description:"Introduction",source:"@site/docs/python/functions.md",sourceDirName:"python",slug:"/python/functions",permalink:"/docs/python/functions",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/functions.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"docsSidebar",previous:{title:"Shallow & Deep Copy",permalink:"/docs/python/shallow_deep"},next:{title:"Recursive Functions",permalink:"/docs/python/recursive_functions"}},o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Default Value",id:"default-value",level:2},{value:"Key-Word-Parameters",id:"key-word-parameters",level:2},{value:"Docstring",id:"docstring",level:2},{value:"Multiple Return Values",id:"multiple-return-values",level:2},{value:"Local &amp; Global Variables",id:"local--global-variables",level:2},{value:"Command-Line Arguments",id:"command-line-arguments",level:2},{value:"Variadic Functions",id:"variadic-functions",level:2},{value:"* in function calls",id:"-in-function-calls",level:2},{value:"Any Keyword Parameter",id:"any-keyword-parameter",level:2}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"functions",children:"Functions"})}),"\n",(0,r.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(e.p,{children:"a function is introduced with def and a freely selectable function name"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def functionname(parameters):\n    statement\n"})}),"\n",(0,r.jsx)(e.p,{children:'a function returns one or more return statements\nif the return is left empty "None" is returned\nthe same if there is no return statement'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def helloWorld(name):\n    return "Hello " + name + " !"\n\nprint(helloWorld("John"))\n# Hello John !\n\nf = "John"\nf = helloWorld(f)\nprint(f)\n# Hello John !\n'})}),"\n",(0,r.jsx)(e.h2,{id:"default-value",children:"Default Value"}),"\n",(0,r.jsx)(e.p,{children:"you also have the option to assign a default value to a parameter"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def helloWorld(name="World"):\n    return "Hello " + name + " !"\n\nhelloWorld("John")\n# \'Hello John !\'\n\nhelloWorld()\n# \'Hello World !\'\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def add(value1=4, value2=2):\n    return value1 + value2\n\nadd(4)\n#6\n\ndef add(value1=4, value2=2):\n    return value1 + value2\n\nadd(4, 4)\n#8\n"})}),"\n",(0,r.jsx)(e.p,{children:"However, there is a problem,\nif we try to use only the second parameter without defining the first one\nsince the arguments are passed in order."}),"\n",(0,r.jsx)(e.p,{children:"If only one value is passed it is automatically the first one, so in our case value1"}),"\n",(0,r.jsx)(e.h2,{id:"key-word-parameters",children:"Key-Word-Parameters"}),"\n",(0,r.jsx)(e.p,{children:"we can easily solve the problem described in the previous chapter\nand at the same time improve the readability of the program"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def add(value1=4, value2=2):\n    return value1 + value2\n\nadd(value1=5)\n#7\n\ndef add(value1=4, value2=2):\n    return value1 + value2\n\nadd(value2=12)\n#16\n\ndef add(value1=4, value2=2):\n    return value1 + value2\n\nadd(value2=12, value1=33)\n#45\n"})}),"\n",(0,r.jsx)(e.h2,{id:"docstring",children:"Docstring"}),"\n",(0,r.jsx)(e.p,{children:"docstrings are used for documentation\nthey are stored in the __doc__ attribute\nand do not influence the execution of the function"}),"\n",(0,r.jsx)(e.p,{children:"they are defined directly under the def line of a function"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def heyWorld(name="World"):\n    """returns Hey to the parameter name"""\n    return "Hey " + name + " !"\n\nheyWorld("John")\n# \'Hey John !\'\n'})}),"\n",(0,r.jsx)(e.p,{children:"docstrings can also be placed at the beginning of a Python file"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'"""\nVoluptate sit proident dolore reprehenderit\nenim sunt pariatur irure occaecat anim tempor.\n"""\n\n\ndef heyWorld(name="World"):\n    """returns Hey to the parameter name"""\n    return "Hey " + name + " !"\n\nheyWorld("John")\n# \'Hey John !\'\n'})}),"\n",(0,r.jsx)(e.h2,{id:"multiple-return-values",children:"Multiple Return Values"}),"\n",(0,r.jsx)(e.p,{children:"a function can only output one object\nbut also lists or dictionaries for example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def fib_interv(x):\n    if x < 0:\n        return -1\n    old, new = 0,1\n    while True:\n        if new < x:\n            old, new = new, old+new\n        else:\n            return (old, new)\n\nfor i in (0, 1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14):\n    print(i, fib_interv(i))\n\n# 0 (0, 1)\n# 1 (0, 1)\n# 2 (1, 2)\n# 3 (2, 3)\n# 4 (3, 5)\n# 5 (3, 5)\n# 7 (5, 8)\n# 8 (5, 8)\n# 9 (8, 13)\n# 12 (8, 13)\n# 13 (8, 13)\n# 14 (13, 21)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"local--global-variables",children:"Local & Global Variables"}),"\n",(0,r.jsx)(e.p,{children:"variables are, by default, local in a functional\nbut you can also read global variables within a function"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def f():\n    print(gh)\n\ngh = "Test123"\nf()\n# Test123\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def f():\n    gh = "no Test"\n    print(gh)\n\ngh = "Test123"\nf()\n# no Test\nprint(gh)\n# Test123\n'})}),"\n",(0,r.jsxs)(e.p,{children:["the last example shows very easily that the variable ",(0,r.jsx)(e.em,{children:"gh"})," in ",(0,r.jsx)(e.em,{children:"f"})," is local"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def f():\n    print(gh)\n    gh = "no Test"\n    print(gh)\n\ngh = "Test123"\nf()\n# UnboundLocalError:\nprint(gh)\n'})}),"\n",(0,r.jsxs)(e.p,{children:["the variable ",(0,r.jsx)(e.em,{children:"gh"})," is now ambiguous in ",(0,r.jsx)(e.em,{children:"f()"})]}),"\n",(0,r.jsx)(e.p,{children:"if you want to write to a variable within a function,\nyou have to define it explicitly as global"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def f():\n    global gh\n    print(gh)\n    gh = "no Test"\n    print(gh)\n\ngh = "Test123"\nf()\n# Test123\n# no Test\n\nprint(gh)\n# no Test\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"gh\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n# NameError: name 'gh' is not defined\n\ndef f():\n    global gh\n    gh = 123\n\ngh\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n# NameError: name 'gh' is not defined\n\nf()\n\ngh\n# 123\n"})}),"\n",(0,r.jsx)(e.h2,{id:"command-line-arguments",children:"Command-Line Arguments"}),"\n",(0,r.jsx)(e.p,{children:"when starting a Python program you can transfer so-called start arguments"}),"\n",(0,r.jsx)(e.p,{children:"these are separated from each other by a space"}),"\n",(0,r.jsx)(e.p,{children:"they are available inside the Python script in a list (sys.argv)\nin addition to the parameters the file name is stored in the list at the first position (sys.argv[0])"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"import sys\n\nfor Argument in sys.argv:\n    print(Argument)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"variadic-functions",children:"Variadic Functions"}),"\n",(0,r.jsx)(e.p,{children:"variadic functions\nallow flexibility in defining functions\nwhere the number of parameters is not fixed at definition"}),"\n",(0,r.jsxs)(e.p,{children:["for this, we use ",(0,r.jsx)(e.code,{children:'"*"'})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def print_args(*args):\n    for argument in args:\n        print(argument)\n\nprint_args(123, "Lorem bli bla blu", "more bli bla")\n# 123\n# Lorem bli bla blu\n# more bli bla\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def print_args(number, *text):\n    print(number, text)\n\nprint_args(123, \"Lorem bli bla blu\", \"more bli bla\")\n# 123 ('Lorem bli bla blu', 'more bli bla')\n"})}),"\n",(0,r.jsx)(e.h2,{id:"-in-function-calls",children:"* in function calls"}),"\n",(0,r.jsxs)(e.p,{children:["when using a ",(0,r.jsx)(e.code,{children:"*"})," in the function call, an argument is unpacked\nthis can be useful when you want to separate the contents of a list or tuple"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def print_args(number1, number2, number3):\n    print(number1, number2, number3)\n\nlist1 = [3, 6, 9]\nprint_args(*list1)\n# 3 6 9\n"})}),"\n",(0,r.jsx)(e.p,{children:"if you want to pass lists you have to unpack them before you pass them\notherwise, this list is only summarized in a tuple"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def print_args(number, *text):\n    print(number, text)\n\nlist1 = [3, 4, 2, 6, 9]\nprint_args(123, list1)\n# 123 ([3, 4, 2, 6, 9],)\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def print_args(number, *text):\n    print(number, text)\n\nlist1 = [3, 4, 2, 6, 9]\nprint_args(123, *list1)\n# 123 (3, 4, 2, 6, 9)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"any-keyword-parameter",children:"Any Keyword Parameter"}),"\n",(0,r.jsxs)(e.p,{children:["With ",(0,r.jsx)(e.code,{children:"**"})," we can generate any number of key-word parameters"]}),"\n",(0,r.jsx)(e.p,{children:"which are then stored in dictionaries"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def gh(**args):\n    print(args)\n\ngh()\n# {}\n\ngh(de=\"German\", en=\"English\")\n# {'de': 'German', 'en': 'English'}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["as in the last article, we can also use ",(0,r.jsx)(e.code,{children:"**"})," in the function call"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"def f(a, b, c, h):\n    print(a, b, c, h)\n\nd = {'a':'aaaaaaa', 'b':'bbbbbbb', 'c':'ccccc', 'h':'hhhhh'}\nf(**d)\n# aaaaaaa bbbbbbb ccccc hhhhh\n"})})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>l,x:()=>s});var r=a(6540);const i={},t=r.createContext(i);function l(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);