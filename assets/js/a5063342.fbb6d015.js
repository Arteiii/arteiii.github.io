"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[8783],{8813:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=o(4848),r=o(8453);const t={id:"logging",title:"Logging",sidebar_position:3},i="Logging",l={id:"logging",title:"Logging",description:"Rust provides multiple logging crates that can be easily integrated into your applications for various logging levels,",source:"@site/rust-cookbook/logging.md",sourceDirName:".",slug:"/logging",permalink:"/rust-cookbook/logging",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"logging",title:"Logging",sidebar_position:3},sidebar:"rustCookbookSidebar",previous:{title:"Range",permalink:"/rust-cookbook/datatypes/standard-library/ranges-iterators/range"},next:{title:"Database",permalink:"/rust-cookbook/database/"}},a={},c=[{value:"Log Messages",id:"log-messages",level:2},{value:"Log a debug message to the console",id:"log-a-debug-message-to-the-console",level:3},{value:"Log an error message to the console",id:"log-an-error-message-to-the-console",level:3},{value:"Log to stdout instead of stderr",id:"log-to-stdout-instead-of-stderr",level:3},{value:"Log messages with a custom logger",id:"log-messages-with-a-custom-logger",level:3},{value:"Log to the Unix syslog",id:"log-to-the-unix-syslog",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Enable log levels per module",id:"enable-log-levels-per-module",level:3},{value:"Use a custom environment variable to set up logging",id:"use-a-custom-environment-variable-to-set-up-logging",level:3},{value:"Include timestamp in log messages",id:"include-timestamp-in-log-messages",level:3},{value:"Log messages to a custom location",id:"log-messages-to-a-custom-location",level:3},{value:"Async Logging with <code>tokio-tracing</code>",id:"async-logging-with-tokio-tracing",level:2},{value:"Set up Tokio and Tracing",id:"set-up-tokio-and-tracing",level:3},{value:"Logging with Tracing in an Async Context",id:"logging-with-tracing-in-an-async-context",level:3},{value:"Logging Context in Async Functions",id:"logging-context-in-async-functions",level:3},{value:"Capturing Function Return Values",id:"capturing-function-return-values",level:3},{value:"Customizing Field Logging with <code>#[instrument]</code>",id:"customizing-field-logging-with-instrument",level:3}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"logging",children:"Logging"})}),"\n",(0,s.jsx)(n.p,{children:"Rust provides multiple logging crates that can be easily integrated into your applications for various logging levels,\ncustom outputs, and more."}),"\n",(0,s.jsx)(n.h2,{id:"log-messages",children:"Log Messages"}),"\n",(0,s.jsxs)(n.p,{children:["Log messages are categorized into different levels, such as ",(0,s.jsx)(n.code,{children:"debug"}),", ",(0,s.jsx)(n.code,{children:"info"}),", ",(0,s.jsx)(n.code,{children:"warn"}),", ",(0,s.jsx)(n.code,{children:"error"}),", etc.,\neach serving a unique purpose in monitoring your application's state.\nRust's ",(0,s.jsx)(n.code,{children:"log"})," crate provides macros to generate these messages,\nwhile libraries like ",(0,s.jsx)(n.code,{children:"env_logger"})," help you control their output."]}),"\n",(0,s.jsx)(n.h3,{id:"log-a-debug-message-to-the-console",children:"Log a debug message to the console"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"log"})," crate provides logging utilities. The ",(0,s.jsx)(n.code,{children:"env_logger"})," crate configures\nlogging via an environment variable.  The ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/macro.debug.html",children:(0,s.jsx)(n.code,{children:"log::debug!"})})," macro works like other\n",(0,s.jsx)(n.a,{href:"https://doc.rust-lang.org/std/fmt/",children:(0,s.jsx)(n.code,{children:"std::fmt"})})," formatted strings."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'fn execute_query(query: &str) {\n    log::debug!("Executing query: {}", query);\n}\n\nfn main() {\n    env_logger::init();\n\n    execute_query("DROP TABLE students");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["No output prints when running this code. By default, the\nlog level is ",(0,s.jsx)(n.code,{children:"error"}),", and any lower levels are dropped."]}),"\n",(0,s.jsxs)(n.p,{children:["Set the ",(0,s.jsx)(n.code,{children:"RUST_LOG"})," environment variable to print the message:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ RUST_LOG=debug cargo run\n"})}),"\n",(0,s.jsx)(n.p,{children:"Cargo prints debugging information then the\nfollowing line at the very end of the output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"DEBUG:main: Executing query: DROP TABLE students\n"})}),"\n",(0,s.jsx)(n.h3,{id:"log-an-error-message-to-the-console",children:"Log an error message to the console"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Proper error handling considers exceptions exceptional.  Here, an error logs\nto stderr with ",(0,s.jsx)(n.code,{children:"log"}),"'s convenience macro ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/macro.error.html",children:(0,s.jsx)(n.code,{children:"log::error!"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'fn execute_query(_query: &str) -> Result<(), &\'static str> {\n    Err("I\'m afraid I can\'t do that")\n}\n\nfn main() {\n    env_logger::init();\n\n    let response = execute_query("DROP TABLE students");\n    if let Err(err) = response {\n        log::error!("Failed to execute query: {}", err);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"log-to-stdout-instead-of-stderr",children:"Log to stdout instead of stderr"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Creates a custom logger configuration using the ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/struct.Builder.html#method.target",children:(0,s.jsx)(n.code,{children:"Builder::target"})})," to set the target of the log output to ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/fmt/enum.Target.html",children:(0,s.jsx)(n.code,{children:"Target::Stdout"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use env_logger::{Builder, Target};\n\nfn main() {\n    Builder::new()\n        .target(Target::Stdout)\n        .init();\n\n    log::error!("This error has been printed to Stdout");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"log-messages-with-a-custom-logger",children:"Log messages with a custom logger"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Implements a custom logger ",(0,s.jsx)(n.code,{children:"ConsoleLogger"})," which prints to stdout.\nIn order to use the logging macros, ",(0,s.jsx)(n.code,{children:"ConsoleLogger"})," implements\nthe ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/trait.Log.html",children:(0,s.jsx)(n.code,{children:"log::Log"})})," trait and ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/fn.set_logger.html",children:(0,s.jsx)(n.code,{children:"log::set_logger"})})," installs it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use log::{Record, Level, Metadata, LevelFilter, SetLoggerError};\n\nstatic CONSOLE_LOGGER: ConsoleLogger = ConsoleLogger;\n\nstruct ConsoleLogger;\n\nimpl log::Log for ConsoleLogger {\n  fn enabled(&self, metadata: &Metadata) -> bool {\n     metadata.level() <= Level::Info\n    }\n\n    fn log(&self, record: &Record) {\n        if self.enabled(record.metadata()) {\n            println!("Rust says: {} - {}", record.level(), record.args());\n        }\n    }\n\n    fn flush(&self) {}\n}\n\nfn main() -> Result<(), SetLoggerError> {\n    log::set_logger(&CONSOLE_LOGGER)?;\n    log::set_max_level(LevelFilter::Info);\n\n    log::info!("hello log");\n    log::warn!("warning");\n    log::error!("oops");\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"log-to-the-unix-syslog",children:"Log to the Unix syslog"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nsyslog = "7.0.0"\nlog = "0.4.22"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Logs messages to ",(0,s.jsx)(n.a,{href:"https://www.gnu.org/software/libc/manual/html_node/Overview-of-Syslog.html",children:"UNIX syslog"}),". Initializes logger backend\nwith ",(0,s.jsx)(n.a,{href:"https://docs.rs/syslog/*/syslog/fn.init.html",children:(0,s.jsx)(n.code,{children:"syslog::init"})}),". ",(0,s.jsx)(n.a,{href:"https://docs.rs/syslog/*/syslog/enum.Facility.html",children:(0,s.jsx)(n.code,{children:"syslog::Facility"})})," records the program submitting\nthe log entry's classification, ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/enum.LevelFilter.html",children:(0,s.jsx)(n.code,{children:"log::LevelFilter"})})," denotes allowed log verbosity\nand ",(0,s.jsx)(n.code,{children:"Option<&str>"})," holds optional application name."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use syslog::{Facility, Error};\n\nfn main() -> Result<(), Error> {\n    syslog::init(Facility::LOG_USER,\n                 log::LevelFilter::Debug,\n                 Some("My app name"))?;\n    log::debug!("this is a debug {}", "message");\n    log::error!("this is an error!");\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"enable-log-levels-per-module",children:"Enable log levels per module"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Creates two modules ",(0,s.jsx)(n.code,{children:"foo"})," and nested ",(0,s.jsx)(n.code,{children:"foo::bar"})," with logging directives\ncontrolled separately with ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/#enabling-logging",children:(0,s.jsx)(n.code,{children:"RUST_LOG"})})," environmental variable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'mod foo {\n    mod bar {\n        pub fn run() {\n            log::warn!("[bar] warn");\n            log::info!("[bar] info");\n            log::debug!("[bar] debug");\n        }\n    }\n\n    pub fn run() {\n        log::warn!("[foo] warn");\n        log::info!("[foo] info");\n        log::debug!("[foo] debug");\n        bar::run();\n    }\n}\n\nfn main() {\n    env_logger::init();\n    log::warn!("[root] warn");\n    log::info!("[root] info");\n    log::debug!("[root] debug");\n    foo::run();\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/#enabling-logging",children:(0,s.jsx)(n.code,{children:"RUST_LOG"})})," environment variable controls [",(0,s.jsx)(n.code,{children:"env_logger"}),"][env_logger] output.\nModule declarations take comma separated entries formatted like\n",(0,s.jsx)(n.code,{children:"path::to::module=log_level"}),". Run the ",(0,s.jsx)(n.code,{children:"test"})," application as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'RUST_LOG="warn,test::foo=info,test::foo::bar=debug" ./test\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Sets the default ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/enum.Level.html",children:(0,s.jsx)(n.code,{children:"log::Level"})})," to ",(0,s.jsx)(n.code,{children:"warn"}),", module ",(0,s.jsx)(n.code,{children:"foo"})," and module ",(0,s.jsx)(n.code,{children:"foo::bar"}),"\nto ",(0,s.jsx)(n.code,{children:"info"})," and ",(0,s.jsx)(n.code,{children:"debug"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"WARN:test: [root] warn\nWARN:test::foo: [foo] warn\nINFO:test::foo: [foo] info\nWARN:test::foo::bar: [bar] warn\nINFO:test::foo::bar: [bar] info\nDEBUG:test::foo::bar: [bar] debug\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-a-custom-environment-variable-to-set-up-logging",children:"Use a custom environment variable to set up logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/struct.Builder.html",children:(0,s.jsx)(n.code,{children:"Builder"})})," configures logging."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/struct.Builder.html#method.from_env",children:(0,s.jsx)(n.code,{children:"Builder::from_env"})})," parses ",(0,s.jsx)(n.code,{children:"MY_APP_LOG"}),"\nenvironment variable contents in the form of ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/#enabling-logging",children:(0,s.jsx)(n.code,{children:"RUST_LOG"})})," syntax.\nThen, ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/struct.Builder.html#method.init",children:(0,s.jsx)(n.code,{children:"Builder::init"})})," initializes the logger."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use env_logger::Builder;\n\nfn main() {\n    Builder::from_env("MY_APP_LOG").init();\n\n    log::info!("informational message");\n    log::warn!("warning message");\n    log::error!("this is an error {}", "message");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"include-timestamp-in-log-messages",children:"Include timestamp in log messages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nenv_logger = "0.11.5"\nchrono = "0.4.38"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Creates a custom logger configuration with ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/struct.Builder.html",children:(0,s.jsx)(n.code,{children:"Builder"})}),".\nEach log entry calls ",(0,s.jsx)(n.a,{href:"https://docs.rs/chrono/*/chrono/offset/struct.Local.html#method.now",children:(0,s.jsx)(n.code,{children:"Local::now"})})," to get the current ",(0,s.jsx)(n.a,{href:"https://docs.rs/chrono/*/chrono/datetime/struct.DateTime.html",children:(0,s.jsx)(n.code,{children:"DateTime"})})," in local\ntimezone and uses ",(0,s.jsx)(n.a,{href:"https://docs.rs/chrono/*/chrono/struct.DateTime.html#method.format",children:(0,s.jsx)(n.code,{children:"DateTime::format"})})," with ",(0,s.jsx)(n.a,{href:"https://docs.rs/chrono/*/chrono/format/strftime/index.html#specifiers",children:(0,s.jsx)(n.code,{children:"strftime::specifiers"})})," to format\na timestamp used in the final log."]}),"\n",(0,s.jsxs)(n.p,{children:["The example calls ",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/*/env_logger/struct.Builder.html#method.format",children:(0,s.jsx)(n.code,{children:"Builder::format"})})," to set a closure which formats each\nmessage text with timestamp, ",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/struct.Record.html#method.level",children:(0,s.jsx)(n.code,{children:"Record::level"})})," and body (",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/struct.Record.html#method.args",children:(0,s.jsx)(n.code,{children:"Record::args"})}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use std::io::Write;\nuse chrono::Local;\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nfn main() {\n    Builder::new()\n        .format(|buf, record| {\n            writeln!(buf,\n                "{} [{}] - {}",\n                Local::now().format("%Y-%m-%dT%H:%M:%S"),\n                record.level(),\n                record.args()\n            )\n        })\n        .filter(None, LevelFilter::Info)\n        .init();\n\n    log::warn!("warn");\n    log::info!("info");\n    log::debug!("debug");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"stderr output will contain"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"2017-05-22T21:57:06 [WARN] - warn\n2017-05-22T21:57:06 [INFO] - info\n"})}),"\n",(0,s.jsx)(n.h3,{id:"log-messages-to-a-custom-location",children:"Log messages to a custom location"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nlog = "0.4.22"\nlog4rs = "1.3.0"\n'})}),"\n",(0,s.jsx)(n.p,{children:"[log4rs] configures log output to a custom location. [log4rs] can use either an\nexternal YAML file or a builder configuration."}),"\n",(0,s.jsxs)(n.p,{children:["Create the log configuration with ",(0,s.jsx)(n.a,{href:"https://docs.rs/log4rs/*/log4rs/append/file/struct.FileAppender.html",children:(0,s.jsx)(n.code,{children:"log4rs::append::file::FileAppender"})}),". An\nappender defines the logging destination.  The configuration continues with\nencoding using a custom pattern from ",(0,s.jsx)(n.a,{href:"https://docs.rs/log4rs/*/log4rs/encode/pattern/index.html",children:(0,s.jsx)(n.code,{children:"log4rs::encode::pattern"})}),".\nAssigns the configuration to ",(0,s.jsx)(n.a,{href:"https://docs.rs/log4rs/*/log4rs/config/struct.Config.html",children:(0,s.jsx)(n.code,{children:"log4rs::config::Config"})})," and sets the default\n",(0,s.jsx)(n.a,{href:"https://docs.rs/log/*/log/enum.LevelFilter.html",children:(0,s.jsx)(n.code,{children:"log::LevelFilter"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use log::LevelFilter;\nuse log4rs::{\n    append::file::FileAppender,\n    config::{Appender, Config, Root},\n    encode::pattern::PatternEncoder,\n};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let logfile = FileAppender::builder()\n        .encoder(Box::new(PatternEncoder::new("{l} - {m}\\n")))\n        .build("log/output.log")?;\n\n    let config = Config::builder()\n        .appender(Appender::builder().build("logfile", Box::new(logfile)))\n        .build(Root::builder().appender("logfile").build(LevelFilter::Info))?;\n\n    log4rs::init_config(config)?;\n\n    log::info!("Hello, world!");\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"async-logging-with-tokio-tracing",children:["Async Logging with ",(0,s.jsx)(n.code,{children:"tokio-tracing"})]}),"\n",(0,s.jsxs)(n.p,{children:["In asynchronous applications, especially those using ",(0,s.jsx)(n.a,{href:"https://tokio.rs/",children:(0,s.jsx)(n.code,{children:"tokio"})}),",\nit's important to use logging tools that work seamlessly with async tasks.\nThe ",(0,s.jsx)(n.a,{href:"https://crates.io/crates/tracing",children:(0,s.jsx)(n.code,{children:"tracing"})})," crate provides structured logging and diagnostics specifically for async Rust applications."]}),"\n",(0,s.jsx)(n.h3,{id:"set-up-tokio-and-tracing",children:"Set up Tokio and Tracing"}),"\n",(0,s.jsx)(n.p,{children:"First, add the necessary dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\ntokio = { version = "1.40.0", features = ["full"] }\ntracing = "0.1.40"\ntracing-subscriber = "0.3.18"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tracing"})," crate provides structured, async-aware logging capabilities.\n",(0,s.jsx)(n.code,{children:"tracing-subscriber"})," is used to manage subscribers that handle log output, and ",(0,s.jsx)(n.code,{children:"tokio"})," enables async runtimes."]}),"\n",(0,s.jsx)(n.h3,{id:"logging-with-tracing-in-an-async-context",children:"Logging with Tracing in an Async Context"}),"\n",(0,s.jsxs)(n.p,{children:["To use ",(0,s.jsx)(n.code,{children:"tracing"})," in an async ",(0,s.jsx)(n.code,{children:"tokio"})," runtime,\nset up a tracing subscriber to handle log output and instrument async functions:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[tokio::main]\nasync fn main() {\n    // Set up a tracing subscriber that logs to stdout\n    tracing_subscriber::fmt::init();\n\n    // Call an async function that will generate log output\n    perform_task("Ben").await;\n}\n\n#[tracing::instrument]\nasync fn perform_task(name: &str) {\n    tracing::info!("Performing an important async task");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"#[instrument]"})," attribute automatically generates structured logs, capturing input arguments and other context."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tracing_subscriber::fmt::init()"})," sets up a subscriber that logs to stdout."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"logging-context-in-async-functions",children:"Logging Context in Async Functions"}),"\n",(0,s.jsx)(n.p,{children:"In async Rust, capturing context with spans is essential for logging in distributed, concurrent environments.\nFor example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt::init();\n    task1().await;\n}\n\n#[tracing::instrument]\nasync fn task1() {\n    tracing::info!("Starting task1");\n    task2().await;\n}\n\n#[tracing::instrument]\nasync fn task2() {\n    tracing::info!("Starting task2");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Each function call logs its span,\nallowing tracing to display structured logs showing which async tasks executed and when."}),"\n",(0,s.jsx)(n.h3,{id:"capturing-function-return-values",children:"Capturing Function Return Values"}),"\n",(0,s.jsx)(n.p,{children:"You can also capture return values in async functions by setting ret to true.\nThis is useful for debugging functions that return futures:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt::init();\n    let result = compute(5).await;\n    println!("Result: {}", result);\n}\n\n#[tracing::instrument(ret)]\nasync fn compute(input: u32) -> u32 {\n    input * 2\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"customizing-field-logging-with-instrument",children:["Customizing Field Logging with ",(0,s.jsx)(n.code,{children:"#[instrument]"})]}),"\n",(0,s.jsx)(n.p,{children:"By default, #[instrument] logs all function arguments,\nbut you can customize which arguments or fields to include or exclude.\nUse the fields argument to control the log output."}),"\n",(0,s.jsx)(n.p,{children:"For example, you can explicitly log only specific fields:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt::init();\n    greet("Ben", 42).await;\n}\n\n#[tracing::instrument(fields(user = name), skip(name))]\nasync fn greet(name: &str, age: u32) {\n    tracing::info!("Saying hello");\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var s=o(6540);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);