"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[6768],{1363:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=i(4848),t=i(8453);const r={sidebar_position:5},c="Sets",a={id:"python/sets",title:"Sets",description:"Introduction",source:"@site/docs/python/sets.md",sourceDirName:"python",slug:"/python/sets",permalink:"/docs/python/sets",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/sets.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Dictionaries",permalink:"/docs/python/dictionaries"},next:{title:"Input",permalink:"/docs/python/input"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Methods",id:"methods",level:2},{value:"Add",id:"add",level:3},{value:"Clear",id:"clear",level:3},{value:"Copy",id:"copy",level:3},{value:"Difference Update",id:"difference-update",level:3},{value:"Difference",id:"difference",level:3},{value:"Discard",id:"discard",level:3},{value:"Intersection",id:"intersection",level:3},{value:"isDisjoint",id:"isdisjoint",level:3},{value:"isSubset",id:"issubset",level:3},{value:"pop",id:"pop",level:3},{value:"Remove",id:"remove",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sets",children:"Sets"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"sets are a collection of unique and unchangeable elements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> city = {\"Pittsburgh\", \"Lincoln\", \"Lubbock\", \"Corpus Christi\"}\n\n>>> print(city)\n# output:\n{'Lubbock', 'Corpus Christi', 'Pittsburgh', 'Lincoln'}\n\n>>> \"Pittsburgh\" in city\nTrue\n\n>>> \"Berlin\" in city\nFalse\n\n\n>>> cities = set((\"Paris\", \"Lyon\", \"London\", \"Berlin\", \"Paris\"))\n>>> cities\n{'London', 'Paris', 'Berlin', 'Lyon'}\n    # you can see that paris occurs only once\n\n\n>>> x = set(\"Python1235123\")\n>>> x\n{'h', 't', '1', '3', '2', '5', 'y', 'P', 'o', 'n'}\n\n>>> type(x)\n<class 'set'>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["sets are implemented in a way that they ",(0,s.jsx)(n.strong,{children:"do not"})," allow mutable objects"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> cities = set((("Python","Perl"), ("Paris", "Berlin", "London")))\n\n>>> cities = set((["Python","Perl"], ["Paris", "Berlin", "London"]))\nTraceback (most recent call last):\n   File "<stdin>", line 1, in <module>\nTypeError: unhashable type: \'list\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"even if sets cannot contain mutable objects, a set can be modified:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> cities = {\"Pittsburgh\", \"Lincoln\", \"Lubbock\", \"Corpus Christi\"}\n>>> cities.add(\"Frankfurt\")\n>>> cities\n{'Lubbock', 'Corpus Christi', 'Pittsburgh', 'Lincoln', 'Frankfurt'}\n"})}),"\n",(0,s.jsx)(n.p,{children:"frozensets are like sets only they can not be changed!!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> cities = frozenset(["Pittsburgh", "Lincoln", "Lubbock", "Corpus Christi"])\n>>> cities.add("Frankfurt")\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: \'frozenset\' object has no attribute \'add\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"add",children:"Add"}),"\n",(0,s.jsx)(n.p,{children:"an object is only added as a new element if it is not already contained\nif it is already contained calling the function has no effect"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> city = {"Pittsburgh", "Lincoln", "Lubbock", "Corpus Christi"}\n>>> city.add("Frankfurt")\n>>> city\n{\'Lubbock\', \'Corpus Christi\', \'Pittsburgh\', \'Lincoln\', \'Frankfurt\'}\n\n>>> city.add(["Frankfurt", "Berlin"])\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: unhashable type: \'list\'\n'})}),"\n",(0,s.jsx)(n.h3,{id:"clear",children:"Clear"}),"\n",(0,s.jsx)(n.p,{children:"removes every element of a list"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> city = {"Pittsburgh", "Lincoln", "Lubbock", "Corpus Christi"}\n>>> city.clear()\n>>> city\nset()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"copy",children:"Copy"}),"\n",(0,s.jsx)(n.p,{children:"copy creates a flat copy of the set"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> city = {\"Pittsburgh\", \"Lincoln\", \"Lubbock\", \"Corpus Christi\"}\n>>> cities_backup = city.copy()\n>>> city.clear()\n>>> cities_backup\n{'Lubbock', 'Corpus Christi', 'Pittsburgh', 'Lincoln'}\n"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.p,{children:'the next example does not work because: "cities_backup = city"\nonly creates a pointer (another name for the same object)'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> city = {"Pittsburgh", "Lincoln", "Lubbock", "Corpus Christi"}\n>>> cities_backup = city\n>>> city.clear()\n>>> cities_backup\nset()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"difference-update",children:"Difference Update"}),"\n",(0,s.jsx)(n.p,{children:"the method difference_update removes all elements of another set from a set"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> y = {"b", "c"}\n>>> x.difference_update(y)\n>>> x\n{\'e\', \'d\', \'a\'}\n\n>>> x = {"a", "b", "c", "d", "e"}\n>>> y = {"b", "c"}\n>>> x = x - y\n>>> x\n{\'a\', \'e\', \'d\'}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"difference",children:"Difference"}),"\n",(0,s.jsx)(n.p,{children:"the difference of two or more sets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> y = {"b", "c"}\n>>> z = {"c", "d"}\n>>> x.difference(y)\n{\'d\', \'a\', \'e\'}\n\n>>> x.difference(y).difference(z)\n{\'a\', \'e\'}\n'})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.p,{children:'instead of using difference we could also use "-".'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> x - y\n{'d', 'e', 'a'}\n\n>>> x - y - z\n{'e', 'a'}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"discard",children:"Discard"}),"\n",(0,s.jsx)(n.p,{children:"discard(el)"}),"\n",(0,s.jsx)(n.p,{children:"the element el is removed from a set if it is included\nif not nothing happens"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> x.discard("a")\n>>> x\n{\'e\', \'b\', \'d\', \'c\'}\n\n>>> x = {"a", "b", "c", "d", "e"}\n>>> x.discard("z")\n>>> x\n{\'e\', \'b\', \'d\', \'a\', \'c\'}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"intersection",children:"Intersection"}),"\n",(0,s.jsxs)(n.p,{children:[".intersection(",(0,s.jsx)(n.em,{children:"s"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["returns the intersection of ",(0,s.jsx)(n.em,{children:"s"})," and the instance set"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> y = {"c", "d", "e", "f", "g"}\n>>> x.intersection(y)\n{\'d\', \'e\', \'c\'}\n'})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.p,{children:"alternative can also be used &"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> y = {"c", "d", "e", "f", "g"}\n>>> x & y\n{\'d\', \'e\', \'c\'}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"isdisjoint",children:"isDisjoint"}),"\n",(0,s.jsx)(n.p,{children:".isdisjoint()"}),"\n",(0,s.jsx)(n.p,{children:"returns True if two sets have an empty intersection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b"}\n>>> y = {"c", "d"}\n>>> z = {"b", "c"}\n>>> x.isdisjoint(y)\nTrue\n\n>>> x.isdisjoint(z)\nFalse\n'})}),"\n",(0,s.jsx)(n.h3,{id:"issubset",children:"isSubset"}),"\n",(0,s.jsx)(n.p,{children:".issubset()"}),"\n",(0,s.jsx)(n.p,{children:"x.issuperset(y) returns True if x is a superset of y (>=).\na simple greater than sign (>) checks if it is a true superset:\nif x > y then x contains at least one element not contained in y"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> y = {"b", "c"}\n>>> x.issuperset(y)\nTrue\n\n>>> x > y\nTrue\n\n>>> x >= y\nTrue\n\n>>> x >= x\nTrue\n\n>>> x > x\nFalse\n\n>>> x.issuperset(x)\nTrue\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pop",children:"pop"}),"\n",(0,s.jsx)(n.p,{children:".pop()"}),"\n",(0,s.jsx)(n.p,{children:"returns any element the element is removed from the set"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> x = {\"a\", \"b\", \"c\"}\n>>> x.pop()\n'a'\n>>> x.pop()\n'b'\n>>> x.pop()\n'c'\n"})}),"\n",(0,s.jsx)(n.p,{children:"if there are no elements left py returns an error"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> x.pop()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'pop from an empty set'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"remove",children:"Remove"}),"\n",(0,s.jsxs)(n.p,{children:[".remove(",(0,s.jsx)(n.em,{children:"el"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["works like discard only if ",(0,s.jsx)(n.em,{children:"el"})," is not included an error is generated"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> x = {"a", "b", "c", "d", "e"}\n>>> x.remove("a")\n>>> x\n{\'e\', \'b\', \'d\', \'c\'}\n\n>>> x = {"a", "b", "c", "d", "e"}\n>>> x.remove("z")\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nKeyError: \'z\'\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);