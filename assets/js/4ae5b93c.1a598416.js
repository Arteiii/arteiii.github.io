"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[2301],{2206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=t(4848),r=t(8453);const s={sidebar_position:10},a="Formated Output",d={id:"python/formated_output",title:"Formated Output",description:"Print",source:"@site/docs/python/formated_output.md",sourceDirName:"python",slug:"/python/formated_output",permalink:"/docs/python/formated_output",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/formated_output.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"docsSidebar",previous:{title:"Read & Write Files",permalink:"/docs/python/read_write"},next:{title:"Shallow & Deep Copy",permalink:"/docs/python/shallow_deep"}},o={},l=[{value:"Print",id:"print",level:2},{value:"C-Style Formating",id:"c-style-formating",level:2},{value:"Python-Method",id:"python-method",level:2},{value:"String Literals",id:"string-literals",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Local Variables",id:"local-variables",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"formated-output",children:"Formated Output"})}),"\n",(0,i.jsx)(n.h2,{id:"print",children:"Print"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"print( value1, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n"})}),"\n",(0,i.jsx)(n.p,{children:"with print you can output any number of arguments separated by commas"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import sys\na = 3.123\nprint("a =", a)\n# a: 3.123\nprint("a = \\n", a)\n# a =\n#  3.123\n'})}),"\n",(0,i.jsx)(n.p,{children:"with the argument sep you can change the separator that is output between the values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'print("a", "b")\n# a b\n\nprint("a", "b", sep=\'\')\n# ab\n\nprint(194, 201, 38, 74, sep=\'.\')\n# 194.201.38.74\n\nprint("a", "b", sep=":)")\n# a:)b\n'})}),"\n",(0,i.jsx)(n.p,{children:"after the output python ends with a newline:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"for i in range(3):\n    print(i)\n# 0\n# 1\n# 2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["you can change the default (",(0,i.jsx)(n.code,{children:'"\\n"'}),") using ",(0,i.jsx)(n.code,{children:'end=" "'})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'for i in range(3):\n    print(i, end=" ")\n# 0 1 2\n\n\nfor i in range(3):\n    print(i, end=" :) ")\n# 0 :) 1 :) 2 :)\n'})}),"\n",(0,i.jsx)(n.p,{children:"using file you can output in to a file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'fh = open("formatted_output/date.txt", "w")\nprint("42", file=fh)\nfh.close()\n'})}),"\n",(0,i.jsx)(n.p,{children:"it's also possible to output into the default error channel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'print("Error: 42", file=sys.stderr)\n# Error: 42\n'})}),"\n",(0,i.jsx)(n.h2,{id:"c-style-formating",children:"C-Style Formating"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"is seen as a deprecated and bad style in python"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'print("some value: %4d, another: %3.1f" % (123, 1234.042))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"some value:  123, another: 1234.0"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Placeholder"}),(0,i.jsx)(n.th,{children:"Meaning"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"d/i"}),(0,i.jsx)(n.td,{children:"signed integer (integer, decimal)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"o"}),(0,i.jsx)(n.td,{children:"unsigned integer in octal format"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"u"}),(0,i.jsx)(n.td,{children:"absolute otherwise like a signed integer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"x"}),(0,i.jsx)(n.td,{children:"unsigned integer (hexadecimal)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"X"}),(0,i.jsx)(n.td,{children:"unsigned integer (hexadecimal), uppercase"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"e"}),(0,i.jsx)(n.td,{children:"floating point numbers (exponential format)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"E"}),(0,i.jsx)(n.td,{children:'like e but uppercase for exponent "e".'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"f"}),(0,i.jsx)(n.td,{children:"fixed point displays the number as a fixed point number"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"F"}),(0,i.jsx)(n.td,{children:"like f but nan is displayed as NAN"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"g"}),(0,i.jsx)(n.td,{children:"g corresponds to either e or f this is decided automatically depending on the size of the value and the given precision"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"G"}),(0,i.jsx)(n.td,{children:"G is analogous to g but it corresponds to either E or f"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"c"}),(0,i.jsx)(n.td,{children:"one character"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"s"}),(0,i.jsx)(n.td,{children:"a string any python elements are converted to a string using str()"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%"}),(0,i.jsx)(n.td,{children:'no argument conversion takes place, a "% sign" is given'})]})]})]}),"\n",(0,i.jsx)(n.p,{children:'| Flag | Meaning                                                                    |\n| ---- | -------------------------------------------------------------------------- | ------------------------------------------------------------------ |\n| #    | if this character is used with o,x or X the respective value               | is provided with the corresponding following prefix 0, 0o,0x or 0X |\n| 0    | the result of the conversion is padded with zeros                          |\n| -    | the result of the conversion is left-justified                             |\n|      | if no sign is specified, a blank character is placed in front of the value |\n| +    | the result will be signed (+ or -) this flag overwrites a "space" flag     |'}),"\n",(0,i.jsx)(n.h2,{id:"python-method",children:"Python-Method"}),"\n",(0,i.jsx)(n.p,{children:"the format syntax looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"template.formate(p0, p1, ..., k0=v0, k1=v1, ...)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"\"first argument: {0}, second: {1}\".format(47, 11)\n# 'first argument: 47, second: 11'\n\n\"first argument: {1}, second: {0}\".format(47, 11)\n# 'first argument: 11, second: 47'\n\n\"first argument: {1:3d}, second: {0:7.2f}\".format(47.42, 11)\n# 'first argument:  11, second:   47.42'\n\n\"first argument: {}, second: {}\".format(47, 11)\n# 'first argument: 47, second: 11'\n"})}),"\n",(0,i.jsx)(n.p,{children:"arguments can be used multiple times:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"\"first argument: {0:6.2f}, second: {0:6.3f}\".format(1.4148)\n# 'first argument:   1.41, second:  1.415'\n"})}),"\n",(0,i.jsx)(n.p,{children:"this method also works:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'"first argument: {a:5d}, second: {p:8.2f}".format(a=458, p=59.058)\n# "first argument: {0:6.2f}, second: {0:6.3f}".format(1.4148)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["with the .format method you can output data flush left (",(0,i.jsx)(n.code,{children:"<"}),") or flush right (",(0,i.jsx)(n.code,{children:">"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'"{0:<20s} {1:6.2f}".format("something and something else:", 3.69)\n# "something and something else:            3.69"\n\n"{0:>20s} {1:6.2f}".format("something and something else:", 3.69)\n# "         something and something else:   3.69"\n\n"{0:>20s} {1:6.2f}".format("something & lorem ipsum:", 3.99)\n# "         something & lorem ipsum:   3.99"\n\n"{0:<20s} {1:6.2f}".format("something & lorem ipsum:", 3.99)\n# "something & lorem ipsum:            3.99"\n\n"{0:<20} {1:6.2f}".format("something & lorem ipsum:", 3.99)\n# "something & lorem ipsum:            3.99"\n\n"{0:>20} {1:6.2f}".format("something & lorem ipsum:", 3.99)\n# "         something & lorem ipsum:   3.99"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["| Option | Meaning                                                                                                          |\n| ------ | ---------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| '",(0,i.jsx)(n.code,{children:"<"}),"'  | field is left-justified within the existing space (strings are left-justified by default)                        |\n| '",(0,i.jsx)(n.code,{children:">"}),"'  | field is output right-justified within the existing space (numeric values are output right-justified by default) |\n| '",(0,i.jsx)(n.code,{children:"="}),"'  | padding characters are introduced between the sign, if a sign is output, and the actual                          | beginning of the digit of a number so that fields of the type '+00000420' can be output (can only be applied to numeric values) |\n| '",(0,i.jsx)(n.code,{children:"^"}),"'  | a field is output centered within the available space                                                            |"]}),"\n",(0,i.jsx)(n.p,{children:"works only with numerical!!:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"Meaning"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"'+'"}),(0,i.jsx)(n.td,{children:"sign should always be output, regardless of whether the number is positive or negative."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"'-'"}),(0,i.jsx)(n.td,{children:"sign should only be used for negative numbers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"space"}),(0,i.jsx)(n.td,{children:'instead of a "+", positive numbers are preceded by a " " space. negative numbers are preceded by a minus sign "-".'})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"string-literals",children:"String Literals"}),"\n",(0,i.jsx)(n.p,{children:"formatted string literals are strings preceded by an f\nthey contain escaping fields that are evaluated for\nruntime and formatted according to the format rules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'animal = "Dog"\nheight = 187.4\nf"Animal: {animal}, Height: {height:6.2f}"\n# \'Animal: Dog, Height: 187.40\'\n\nwidth, precision = 10, 3\nx = 123.4238\nf"Value: {x:{width}.{precision}}"\n# \'Value:   3.69e+02\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'capital_country = {\n    "united States": "Washington",\n    "canada": "ottawa",\n    "germany": "Berlin",\n    "France": "Paris",\n    "United Kingdom": "london",\n    "switzerland": "Bern",\n    "austria": "vienna",\n}\n\nprint("countries and their capitals ")\nfor c in capital_country:\n    print("{country}: {capital}".format(country=c, capital=capital_country[c]))\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"countries and their capitals\nunited States: Washington\ncanada: ottawa\ngermany: Berlin\nFrance: Paris\nUnited Kingdom: london\nswitzerland: Bern\naustria: vienna\n"})}),"\n",(0,i.jsxs)(n.p,{children:["you can also use the ",(0,i.jsx)(n.a,{href:"/docs/python/dictionaries",children:"dictionary"})," directly in the call to the format method\n(the ouput is the same)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'print("countries and their capitals:")\nfor c in capital_country:\n    format_string = c + ": {" + c +"}"\n    print(format_string.format(**capital_country))\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"local-variables",children:"Local Variables"}),"\n",(0,i.jsxs)(n.p,{children:["locals is a function that returns a ",(0,i.jsx)(n.a,{href:"/docs/python/dictionaries",children:"dictionary"})," with the locally defined names and their current values"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'a = 42\nb = 123\ndef f(): return 42\n\n\nlocals()\n# a lot of text best use the function yourself\n\n\nprint("a={a}, b={b} and f={f}".format(**locals()))\n# a=42, b=123 and f=<function f at 0x\u2026>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);