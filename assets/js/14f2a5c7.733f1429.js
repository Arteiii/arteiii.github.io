"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[4508],{3010:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>t});var r=l(4848),s=l(8453);const i={sidebar_position:4},a="Dictionaries",d={id:"python/dictionaries",title:"Dictionaries",description:"dictionaries are entered with curly brackets",source:"@site/docs/python/dictionaries.md",sourceDirName:"python",slug:"/python/dictionaries",permalink:"/docs/python/dictionaries",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/dictionaries.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Sequential Datatypes",permalink:"/docs/python/sequential_datatypes"},next:{title:"Sets",permalink:"/docs/python/sets"}},o={},t=[{value:"Define",id:"define",level:2},{value:"Errors",id:"errors",level:2},{value:"Nested Dictionaries",id:"nested-dictionaries",level:2},{value:"Allowed Types",id:"allowed-types",level:2},{value:"Variable Keys",id:"variable-keys",level:3},{value:"Tuple Is Possible",id:"tuple-is-possible",level:3},{value:".len",id:"len",level:3},{value:"Error-Free Access",id:"error-free-access",level:2},{value:".get",id:"get",level:3},{value:"Create From List",id:"create-from-list",level:2},{value:"ZIP-Function",id:"zip-function",level:2},{value:"*",id:"",level:3},{value:"Methods",id:"methods",level:2},{value:".items",id:"items",level:3},{value:".copy",id:"copy",level:3},{value:".popitem",id:"popitem",level:3},{value:".fromkeys",id:"fromkeys",level:3},{value:".keys",id:"keys",level:3},{value:".pop",id:"pop",level:3},{value:".setdefault",id:"setdefault",level:3},{value:".update",id:"update",level:3},{value:".clear",id:"clear",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dictionaries",children:"Dictionaries"})}),"\n",(0,r.jsx)(n.p,{children:"dictionaries are entered with curly brackets\na key value couple is separated with a double point (:)\nand the different couples are separated with a comma"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"food = {\"ham\":\"yes\", \"egg\":\"yes\", \"spam\":\"no\"}\nprint(food)\n    # {'ham': 'yes', 'egg': 'yes', 'spam': 'no'}\n    # You can output the full dictionary with print\n    # The order can be different\n\nfood[\"ham\"]\n    # 'yes'\n    # In order to get the value of a key (Ham) we use cornery slants as in the example\n\nfood[\"ham\"]\n    # 'no'\n\nfood[\"spam\"] = \"yes\"\n    # Changing an existing key works similarly to lists\n    # Only that we use the key here (\"spam\") to change the value (\"no\" to \"yes\")\n\nprint(food)\n    # {'ham': 'yes', 'egg': 'yes', 'spam': 'yes'}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"define",children:"Define"}),"\n",(0,r.jsx)(n.p,{children:'Let\'s define a "dictionary"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'en_de = {"red":"rot", "green":"gr\xfcn", "blue":"blau", "yellow":"gelb"}\n\nen_de["red"]\n    # \'rot\'\n\nen_de["green"]\n    # \'gr\xfcn\'\n    # The only problem here is that the translation only works in one direction\n\nde_en = {"rot":"red", "gr\xfcn":"green", "blau":"blue", "gelb":"yellow"}\n\nde_fr = {"rot":"rouge", "gr\xfcn":"vert", "blau":"bleu", "gelb":"jaune"}\n\nprint("red is in french: " + de_fr[en_de[\'red\']])\n    # red is in french: rouge\n'})}),"\n",(0,r.jsx)(n.h2,{id:"errors",children:"Errors"}),"\n",(0,r.jsx)(n.p,{children:"If you try on a non defined key (color)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'en_de("brown")\n    # Traceback (most recent call last):\n    #   File "<stdin>", line 1, in <module>\n    # TypeError: \'dict\' object is not callable\n'})}),"\n",(0,r.jsx)(n.h2,{id:"nested-dictionaries",children:"Nested Dictionaries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'de_en = {"rot":"red", "gr\xfcn":"green", "blau":"blue", "gelb":"yellow"}\n\nde_fr = {"rot":"rouge", "gr\xfcn":"vert", "blau":"bleu", "gelb":"jaune"}\n\ndictonaries = {"en" : de_en, "fr" : de_fr}\n\nprint(dictonaries["fr"]["blau"])\n    # bleu\n'})}),"\n",(0,r.jsx)(n.h2,{id:"allowed-types",children:"Allowed Types"}),"\n",(0,r.jsx)(n.p,{children:"not only strings but also integers, floats, strings and tuples are allowed\nbut no lists or dictionaries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'ports = {"21":"File Transfer Protocol (FTP)", "22":"Secure Shell (SSH)"}\n\nadressen = {"John":[ ("John" "Doe"), 2063, "Overdrive"]}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"variable-keys",children:"Variable Keys"}),"\n",(0,r.jsx)(n.p,{children:"use of variable keys is not possible:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'dic = {[1, 2, 3]:"test123"}\n    # Traceback (most recent call last):\n    #   File "<stdin>", line 1, in <module>\n    # TypeError: unhashable type: \'list\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tuple-is-possible",children:"Tuple Is Possible"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"dic = {(1, 2, 3):\"abc\", 1.337:\"test1337\"}\ndic\n    # {(1, 2, 3): 'abc', 1.337: 'test1337'}\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"len",children:".len"}),"\n",(0,r.jsx)(n.p,{children:"len also works on dictionaries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'en_de = {"red":"rot", "green":"gr\xfcn", "blue":"blau", "yellow":"gelb"}\nlen(en_de)\n    # 4\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-free-access",children:"Error-Free Access"}),"\n",(0,r.jsx)(n.p,{children:'with the keyword "in" you can check if an index occurs in a dictionary'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'en_de = {"red":"rot", "green":"gr\xfcn", "blue":"blau", "yellow":"gelb"}\n"red" in en_de\n    # True\n\n"brown" in en_de\n    # False\n'})}),"\n",(0,r.jsx)(n.p,{children:"this could be used to first check if the input is valid and if not, output a corresponding\nerror message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'en_de = {"red":"rot", "green":"gr\xfcn", "blue":"blau", "yellow":"gelb"}\n\ncolor = input("farbe?")\n\nif color in en_de:\n    print("The color " + color +" is a key")\n    print("the german value for: " + color + " is " + en_de[color])\n\nelse:\n    print("The color: " + color + " is not a key yet")\n    color_de = input("german for " + color + " ? ")\n    en_de[color] = color_de\n    print("The color " + color + " is now available")\n    print(en_de)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get",children:".get"}),"\n",(0,r.jsx)(n.p,{children:"alternatively you can use .get\nhowever no error message is generated here but the defined default value is output\nd.get(key[, default])"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'en_de = {"red":"rot", "green":"gr\xfcn", "blue":"blau", "yellow":"gelb"}\nen_de.get("brown")\n    #\n\nen_de.get("red")\n    # \'rot\'\n\nen_de.get("brown","default")\n    # \'default\'\n'})}),"\n",(0,r.jsx)(n.h2,{id:"create-from-list",children:"Create From List"}),"\n",(0,r.jsx)(n.p,{children:"dictionaries which consist only of strings which conform to the conventions for variable names\nonly letters, numbers and underscores can also be simply defined"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"en_de = dict(red=\"rot\", green=\"gr\xfcn\", blue=\"blau\", yellow=\"gelb\")\nen_de\n    # {'red': 'rot', 'green': 'gr\xfcn',\n    #  'blue': 'blau', 'yellow': 'gelb'}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"number  = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nother   = [\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\"]\n\nlist(zip(number, other))\n    # [('1', 'a1'), ('2', 'a2'),\n    #  ('3', 'a3'), ('4', 'a4'),\n    #  ('5', 'a5'), ('6', 'a6')]\n"})}),"\n",(0,r.jsx)(n.p,{children:"as you can see this method outputs the items in tuples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"all = dict(zip(number, other))\nall\n    # {'1': 'a1', '2': 'a2', '3': 'a3', '4': 'a4', '5': 'a5', '6': 'a6'}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"zip-function",children:"ZIP-Function"}),"\n",(0,r.jsx)(n.p,{children:"zip is applied to strings, lists and tuples\nso first a tuple with the first two arguments then a tuple with the second and so on...\nthis goes on until one of the iterable objects is used up"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'name = ["Peter", "Sarah", "Maria", "Frank", "Eddie"]\nvalue = ["12", "65", "42", "123", "5632"]\n\nfor name, money in zip(name, value):\n    print(name + " got " + money)\n        # Peter got 12\n        # Sarah got 65\n        # Maria got 42\n        # Frank got 123\n        # Eddie got 5632\n\n\n\n\nz1 = [11, 12, 13]\nz2 = [21, 22, 23]\nz3 = [31, 32, 33]\n\nT = zip(z1, z2, z3)\nT\n    # <zip object at 0x7feffcf58b00>\n\nlist(T)\n    # [(11, 21, 31), (12, 22, 32), (13, 23, 33)]\n'})}),"\n",(0,r.jsx)(n.p,{children:"from a zip object you can create such a list only once,\nafter that it is used up\nand you get an empty list"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"list(T)\n    # []\n\n\n    # also possible:\nZ = [[11, 12, 13],\n     [21, 22, 23],\n     [31, 32, 33]]\n\nlist(Z)\n    # [[11, 12, 13], [21, 22, 23], [31, 32, 33]]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"",children:"*"}),"\n",(0,r.jsx)(n.p,{children:"causes the unpacking of the list"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"TZ = zip(*Z)\nlist(TZ)\n    # [(11, 21, 31), (12, 22, 32), (13, 23, 33)]\n"})}),"\n",(0,r.jsx)(n.p,{children:"you can also connect two flat lists or tuples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"l1 = [11, 12, 13, 14]\nl2 = [21, 22, 23, 24]\n\nlist(zip(l1, l2))\n    # [(11, 21), (12, 22), (13, 23), (14, 24)]\n"})}),"\n",(0,r.jsx)(n.p,{children:"If the arguments of zip are of different length,\nonly the smallest length is processed, all other elements are ignored"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"l1 = [11, 12, 13]\nl2 = [21, 22, 23, 24, 25]\n\nlist(zip(l1, l2))\n    # [(11, 21), (12, 22), (13, 23)]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"items",children:".items"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"D.items()\n"})}),"\n",(0,r.jsx)(n.p,{children:"returns set-like object of type dict_item\na view of the key value pairs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en = {\"rot\":\"red\",\n         \"gr\xfcn\":\"green\",\n         \"blau\":\"blue\",\n         \"gelb\":\"yellow\"}\n\nx = de_en.items()\n\ntype(x)\n    # <class 'dict_items'>\nx\n    # dict_items([('rot', 'red'),\n    #             ('gr\xfcn', 'green'),\n    #             ('blau', 'blue'),\n    #             ('gelb', 'yellow')])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"copy",children:".copy"}),"\n",(0,r.jsxs)(n.p,{children:["copy creates a flat copy (",(0,r.jsx)(n.a,{href:"/docs/python/shallow_deep",children:"Shallow & Deep Copy"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en = {\"rot\":\"red\", \"gr\xfcn\":\"green\", \"blau\":\"blue\", \"gelb\":\"yellow\"}\nd = de_en\nd\n    # {'rot': 'red', 'gr\xfcn': 'green',\n    #  'blau': 'blue', 'gelb': 'yellow'}\n\nd[\"gelblich\"] = \"yellow'\"\nd\n    # {'rot': 'red', 'gr\xfcn': 'green',\n    #  'blau': 'blue', 'gelb': \"yellow'\",\n    #  'gelblich': \"yellow'\"}\n\nde_en\n    # {'rot': 'red', 'gr\xfcn': 'green',\n    #  'blau': 'blue', 'gelb': 'yellow',\n    #  'gelblich': \"yellow'\"}\n"})}),"\n",(0,r.jsx)(n.p,{children:"as you can see this does not work\nbecause the base value is always processed as well"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en = {\"rot\":\"red\", \"gr\xfcn\":\"green\", \"blau\":\"blue\", \"gelb\":\"yellow\"}\nd = de_en.copy()\nd\n    # {'rot': 'red', 'gr\xfcn': 'green',\n    #  'blau': 'blue', 'gelb': 'yellow'}\n\nd[\"gelblich\"] = \"yellow'\"\nd\n    # {'rot': 'red', 'gr\xfcn': 'green',\n    #  'blau': 'blue', 'gelb': \"yellow'\",\n    #  'gelblich': \"yellow'\"}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"popitem",children:".popitem"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"D.popitem()\n"})}),"\n",(0,r.jsx)(n.p,{children:"return any key value pair and remove it from the dictionary\nif the dictionary is empty a KeyError is generated"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en = {\"rot\":\"red\", \"gr\xfcn\":\"green\", \"blau\":\"blue\", \"gelb\":\"yellow\"}\nde_en.popitem()\n    #('gelb', 'yellow')\nde_en\n    # {'rot': 'red', 'gr\xfcn': 'green', 'blau': 'blue'}\n\nde_en.popitem()\n    # ('blau', 'blue')\n\nde_en.popitem()\n    # ('gr\xfcn', 'green')\n\nde_en.popitem()\n    # ('rot', 'red')\n\nde_en.popitem()\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # KeyError: 'popitem(): dictionary is empty'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fromkeys",children:".fromkeys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"dict.fromkeys(S[,v])\n"})}),"\n",(0,r.jsx)(n.p,{children:"datatype (s/key) and v thus the value\nif this is not assigned all get the value None"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"food = (\"French Fries\", \"Garden Salad\", \"Grilled Chicken\")\nd = dict.fromkeys(food)\nd\n    # {'French Fries': None,\n    #  'Garden Salad': None,\n    #  'Grilled Chicken': None}\n\nd = dict.fromkeys(food, \"enjoy\")\nd\n    # {'French Fries': 'enjoy',\n    #  'Garden Salad': 'enjoy',\n    #  'Grilled Chicken': 'enjoy'}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"keys",children:".keys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"D.keys()\n"})}),"\n",(0,r.jsx)(n.p,{children:"returns set-like object of type dict_item\na view of the keys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'de_en = {"rot":"red",\n         "gr\xfcn":"green",\n         "blau":"blue",\n         "gelb":"yellow"}\n\nx = de_en.keys()\n\ntype(x)\n    # <class \'dict_keys\'>\nx\n    # dict_keys([\'rot\', \'gr\xfcn\', \'blau\', \'gelb\'])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pop",children:".pop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"D.pop(k[,d])\n"})}),"\n",(0,r.jsx)(n.p,{children:"removes the specified key(k)\nif k is not a key an error is generated unless the value d was used then this is output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'de_en = {"rot":"red", "gr\xfcn":"green", "blau":"blue", "gelb":"yellow"}\n\nx = de_en.pop("rot")\nx\n    # \'red\'\nde_en\n    # {\'gr\xfcn\': \'green\', \'blau\': \'blue\', \'gelb\': \'yellow\'}\n\n\n\nx = de_en.pop("braun")\n    # Traceback (most recent call last):\n    #   File "<stdin>", line 1, in <module>\n    # KeyError: \'braun\'\n\nx = de_en.pop("braun", "error test 123")\nx\n    # \'error test 123\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"setdefault",children:".setdefault"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"D.setdefault(k[,d])\n"})}),"\n",(0,r.jsx)(n.p,{children:"set k to the value d if k is already in D this changes nothing\nif d was not set the key of k becomes None"}),"\n",(0,r.jsx)(n.p,{children:"1337"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en   = {\"rot\":\"red\",\n           \"gr\xfcn\":\"green\",\n           \"blau\":\"blue\",\n           \"gelb\":\"yellow\"}\n\nde_en.setdefault(\"brown\", \"braun\")\n    # 'braun'\n\nde_en.setdefault(\"gr\xfcn\", \"verde\")\n    # 'green'\n\nde_en.setdefault(\"orange\")\nde_en\n    # {'rot': 'red',\n    #  'gr\xfcn': 'green',\n    #  'blau': 'blue',\n    #  'gelb': 'yellow',\n    #  'brown': 'braun',\n    #  'orange': None}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"update",children:".update"}),"\n",(0,r.jsx)(n.p,{children:"adds another dictionary\nand if necessary overwrites the old values/keys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en   = {\"rot\":\"red\",\n           \"gr\xfcn\":\"green\",\n           \"blau\":\"blue\",\n           \"gelb\":\"yellow\"}\n\nde_en2  = {\"yellow\":\"gelb\", \"red\":\"r\xf6tlich\"}\nde_en.update(de_en2)\nde_en\n    # {'rot': 'red',\n    #  'gr\xfcn': 'green',\n    #  'blau': 'blue',\n    #  'gelb': 'yellow',\n    #  'yellow': 'gelb',\n    #  'red': 'r\xf6tlich'}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"clear",children:".clear"}),"\n",(0,r.jsx)(n.p,{children:"clear deletes all entries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"de_en = {\"rot\":\"red\", \"gr\xfcn\":\"green\", \"blau\":\"blue\", \"gelb\":\"yellow\"}\nde_en\n    # {'rot': 'red', 'gr\xfcn': 'green',\n    #  'blau': 'blue', 'gelb': 'yellow'}\n\nde_en.clear()\nde_en\n    # {}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>d});var r=l(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);