"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[8749],{1895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"boyer-moore","metadata":{"permalink":"/blog/boyer-moore","editUrl":"https://github.com/arteiii/arteiii.github.io/tree/main/blog/algorithms/boyer_moore.md","source":"@site/blog/algorithms/boyer_moore.md","title":"The Boyer-Moore Algorithm","description":"Pattern matching is a fundamental problem in computer science with applications in text processing, search engines, DNA","date":"2024-10-07T12:38:00.000Z","tags":[],"readingTime":2.99,"hasTruncateMarker":true,"authors":[{"name":"Arteii","url":"https://github.com/arteiii","imageURL":"https://avatars.githubusercontent.com/u/48642527","key":"arteii","page":null}],"frontMatter":{"slug":"boyer-moore","authors":"arteii","date":"2024-10-07T12:38"},"unlisted":false,"nextItem":{"title":"Django101 Hello World!","permalink":"/blog/django101"}},"content":"Pattern matching is a fundamental problem in computer science with applications in text processing, search engines, DNA\\nsequencing, and more. The [**Boyer-Moore algorithm**][boyer\u2013moore-wikipedia], introduced by [Robert S. Boyer][boyer] and [J Strother Moore][moore] in 1977, \\nremains one of the most efficient algorithms for string matching in real-world applications. \\nIt takes advantage of information gleaned during the mismatching process to skip portions of the text, \\noften achieving sublinear time complexity on average.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Problem Statement\\n\\nGiven a text string $$T$$ of length $$n$$ and a pattern string $$P$$ of length $$m$$, the goal of pattern matching is to\\nfind all occurrences of $$P$$ as a substring of $$T$$. The brute-force approach requires checking each possible\\nalignment of $$P$$ with $$T$$, which results in a time complexity of $$O(n \\\\cdot m)$$. The Boyer-Moore algorithm\\nimproves upon this by skipping unnecessary comparisons.\\n\\n\\n## The Boyer-Moore Algorithm\\n\\nThe Boyer-Moore algorithm matches the pattern $$P$$ from right to left, starting at the end of the pattern. If a\\nmismatch occurs, the algorithm shifts the pattern over the text based on two preprocessed heuristics: the **Bad\\nCharacter rule** and the **Good Suffix rule**.\\n\\n### 1. Bad Character Rule\\n\\nThe **Bad Character** rule works by identifying mismatches and using the information to shift the pattern efficiently.\\nGiven a mismatch between the text character $$T[i]$$ and the corresponding pattern character $$P[j]$$, we look for the\\nrightmost occurrence of $$T[i]$$ in $$P$$.\\n\\n- If $$T[i]$$ exists in $$P$$, we shift the pattern such that this occurrence aligns with $$T[i]$$.\\n- If $$T[i]$$ does not exist in $$P$$, we shift the entire pattern past the mismatched character.\\n\\nMathematically, let:\\n\\n$$$\\n\\\\text{shift}_{\\\\text{bad\\\\_char}}(i, j) = \\\\max(1, j - \\\\text{rightmost}(T[i]))\\n$$$\\n\\nwhere $$\\\\text{rightmost}(T[i])$$ is the rightmost occurrence of $$T[i]$$ in $$P$$, or -1 if it does not appear.\\n\\n#### Example:\\n\\nConsider the pattern $$P = \\\\text{ABCA}$$ and text $$T = \\\\text{CBABCA}$$. Suppose a mismatch occurs at\\nposition $$i = 2$$, where $$T[2] = \\\\text{B}$$ and $$P[1] = \\\\text{A}$$. Since $$\\\\text{B}$$ exists in $$P$$ at position 1,\\nwe shift the pattern such that this occurrence aligns with $$T[2]$$.\\n\\n\\n### 2. Good Suffix Rule\\n\\nThe **Good Suffix** rule leverages suffixes in the pattern to skip unnecessary shifts. When a mismatch occurs after a\\nsuffix of the pattern has been matched, the algorithm shifts the pattern such that the next occurrence of this suffix\\naligns with the text.\\n\\nMathematically, let:\\n\\n$$$\\n\\\\text{shift}_{\\\\text{good\\\\_suffix}}(j) = m - \\\\text{next\\\\_suffix}(j)\\n$$$\\n\\nwhere $$\\\\text{next\\\\_suffix}(j)$$ is the position of the next occurrence of the matched suffix in the pattern.\\n\\nThere are two cases for shifting based on good suffixes:\\n\\n- **Case 1**: The matched suffix appears elsewhere in the pattern. In this case, we shift the pattern to align the next\\n  occurrence of the suffix.\\n- **Case 2**: The matched suffix does not appear in the pattern, but some prefix of the pattern matches a suffix of the\\n  text. In this case, we shift the pattern such that the prefix aligns with the suffix.\\n\\n#### Example:\\n\\nFor $$P = \\\\text{ABCA}$$ and $$T = \\\\text{CBABCA}$$, if a mismatch occurs after matching the suffix \\"BCA\\", the pattern is\\nshifted to the next occurrence of \\"BCA\\" in $$P$$.\\n\\n\\n## Proof of Efficiency\\n\\nThe Boyer-Moore algorithm operates in sublinear time on average due to the efficiency of its heuristics. Let $$m$$ be\\nthe length of the pattern and $$n$$ the length of the text. The algorithm\'s worst-case time complexity\\nis $$O(n \\\\cdot m)$$, but in practice, the average time complexity is much closer to $$O(n / m)$$, particularly when the\\nalphabet size is large.\\n\\nThis sublinear performance arises because the pattern shifts more than one character in many cases, especially when\\nthere are frequent mismatches or when the pattern is long relative to the text.\\n\\n\\n## Performance Comparison Between Bad Character and Good Suffix Heuristics\\n\\nThe [**Bad Character**](#1-bad-character-rule) rule tends to perform well when the alphabet is large and when mismatches are common because it\\nleverages the presence of mismatched characters to skip unnecessary comparisons. The [**Good Suffix**](#2-good-suffix-rule) rule is more\\neffective when the pattern has repeated structures or when mismatches occur near the end of the pattern, allowing it to\\nskip larger sections of the text.\\n\\nIn practical applications, the combination of these two heuristics provides superior performance over either heuristic\\nused in isolation.\\n\\n1. **Bad Character**: More efficient with larger alphabets and random text.\\n2. **Good Suffix**: More efficient with repetitive patterns and long suffix matches.\\n\\nIn most cases, the Boyer-Moore algorithm uses both heuristics together, allowing the pattern to shift as far as the\\nlarger of the two heuristics suggests.\\n\\n\\n## Conclusion\\n\\nThe Boyer-Moore algorithm is one of the most efficient string-matching algorithms for practical use due to its ability\\nto skip portions of the text rather than performing a brute-force search. \\nBy employing both the [**Bad Character**](#1-bad-character-rule) and [**Good Suffix**](#2-good-suffix-rule) heuristics, \\nthe algorithm achieves sublinear time complexity on average. \\nIts efficiency is particularly notable in scenarios where patterns are long or mismatches occur frequently.\\n\\n\\n## References\\n\\n- Robert S. Boyer - [Wikipedia][boyer]\\n- J Strother Moore - [Wikipedia][moore]\\n- Boyer\u2013Moore string-search algorithm - [Wikipedia][boyer\u2013moore-wikipedia]\\n- Boyer-Moore Algorithm - [GeeksforGeeks][boyer\u2013moore-geeks-for-geeks]\\n- A. V. Aho, and M. J. Corasick, \\"Efficient String Matching: An Aid to Bibliographic Search,\\" *Communications of the ACM*, 1975.\\n- T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, *Introduction to Algorithms*, MIT Press, 2009.\\n\\n\\n[boyer]: https://en.wikipedia.org/wiki/Robert_S._Boyer\\n[moore]: https://en.wikipedia.org/wiki/J_Strother_Moore\\n[boyer\u2013moore-wikipedia]: https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm\\n[boyer\u2013moore-geeks-for-geeks]: https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/"},{"id":"django101","metadata":{"permalink":"/blog/django101","editUrl":"https://github.com/arteiii/arteiii.github.io/tree/main/blog/django/django101/django101.mdx","source":"@site/blog/django/django101/django101.mdx","title":"Django101 Hello World!","description":"The world of web development is full of tools and frameworks, but when it comes to developing powerful and scalable web applications,","date":"2023-07-09T22:00:00.000Z","tags":[],"readingTime":1.92,"hasTruncateMarker":true,"authors":[{"name":"Arteii","url":"https://github.com/arteiii","imageURL":"https://avatars.githubusercontent.com/u/48642527","key":"arteii","page":null}],"frontMatter":{"slug":"django101","title":"Django101 Hello World!","authors":["arteii"],"keywords":["Django","Python","Python Framework","Django Hello World!"],"date":"2023-07-09T22:00","image":"./assets/django_initial_setup.png"},"unlisted":false,"prevItem":{"title":"The Boyer-Moore Algorithm","permalink":"/blog/boyer-moore"},"nextItem":{"title":"MarkDown Intro","permalink":"/blog/MarkDown"}},"content":"import python_download_site from \\"./assets/python_download_site.png\\";\\nimport python_installer_path from \\"./assets/python_installer_add_to_path.png\\";\\nimport django_initial_setup from \\"./assets/django_initial_setup.png\\";\\n\\nThe world of web development is full of tools and frameworks, but when it comes to developing powerful and scalable web applications,\\nDjango is without a doubt one of the best options.\\nDjango provides developers with an elegant and efficient way to build web applications using Python.\\nDjango follows the \\"battery included\\" principle,\\nwhich means it comes with a lot of built-in features and tools to make your development easier.\\nWith Django, you can manage databases, forms, implement user authentication, and much more.\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Setup\\n\\n---\\n\\n\\n### Install Python3\\n\\nBefore we can get started with Django, we need to install Python.\\n(you can skip this part if you have already done so)\\n\\n[Download Site](https://www.python.org/downloads/)\\n\\n<img src={python_download_site} width={450} alt=\\"python download site image\\"/>\\n\\n\\nAfter the download is complete, run the installer. Make sure you check \\"add python.exe to PATH\\".\\n\\n<img src={python_installer_path} width={450} alt=\\"python download site iamge\\"/>\\n\\n\\n### Install Django In pipenv\\n\\n\\nFirst we are going to install pipenv using pip, we do this with the following command\\n\\n```\\npip3 install pipenv\\n```\\n\\n\\nThen we install Django in a virtual environment.\\nto avoid possible compatibility issues with other projects.\\n\\nSo each project has its own Python and Django installation.\\n\\n```\\npipenv install django\\n```\\n\\n\\nactivate the environment with:\\n\\n```\\npipenv shell\\n```\\n\\n\\n### Start Django\\n\\nNow we start a new Django project named \\"blog_arteii_example\\".\\n\\n```\\ndjango-admin startproject blog_arteii_example\\n```\\n\\n\\nThis will create a new folder if you create the project directly in the folder you are currently in:\\n\\n```\\ndjango-admin startproject blog_arteii_example .\\n```\\n\\n\\n```\\npython manage.py runserver\\n```\\n\\nstarts a local server\\n\\n\\\\*for now you can ignore the migration errors\\n\\nyour website is now local available on:\\nhttp://127.0.0.1:8000/\\n\\nyou should see:\\n\\n<img src={django_initial_setup} width={550} alt=\\"python download site iamge\\"/>\\n\\nstop the server\\nusing ctrl + c\\n\\n```\\npython manage.py migrate\\n```\\n\\nremoves the error message that we used to get\\n\\n\\n## Hello World!\\n\\n---\\n\\nlets start creating our first app\\nif you still got a server running pls stop it\\n\\nand run:\\n\\n```\\npython manage.py startapp <app_name>\\n```\\n\\nin my case the app_name is: pages\\n\\nadd it to the project settings\\n\\nYou should add your own applications below the Django applications.\\nBecause Django loads the applications in order.\\nSo if you import yours on top, you won\'t be able to use the Django modules.\\n\\n```py title=\\".../blog_arteii_example/blog_arteii_example/settings.py\\" {11}\\n...\\n# Application definition\\n\\nINSTALLED_APPS = [\\n    \'django.contrib.admin\',\\n    \'django.contrib.auth\',\\n    \'django.contrib.contenttypes\',\\n    \'django.contrib.sessions\',\\n    \'django.contrib.messages\',\\n    \'django.contrib.staticfiles\',\\n    \'pages.apps.PagesConfig\',\\n]\\n...\\n```\\n\\n\\nlet\'s modify the views.py file\\nso when the user requests the homepage i.e. the domain without any directory structure\\nthe function HelloWorld is returned\\n\\n```py title=\\".../blog_arteii_example/pages/views.py\\" {3-6}\\n...\\n# Create your views here.\\nfrom django.http import HttpResponse\\n\\ndef HelloWorld(request):\\n    return HttpResponse(\'Hello World!\')\\n```\\n\\n\\nnow create a new file with the name `urls.py` in pages (`.../blog_arteii_example/pages/urls.py`)\\nand modify, so it looks like this:\\n\\n```py title=\\".../blog_arteii_example/pages/urls.py\\" {1-6}\\nfrom django.urls import path\\nfrom .views import HelloWorld\\n\\nurlpatterns = [\\n    path(\'\', HelloWorld, name=\'home\')\\n]\\n```\\n\\n\\nMost Django projects use many different applications,\\nand each of these applications needs its own URL path.\\nSo we add our app pages to the url patterns so that when a user visits the home page,\\nthey are first redirected to the pages app and then to our HelloWorld function.\\n\\n```py title=\\".../blog_arteii_example/blog_arteii_example/urls.py\\" {3,7}\\nfrom django.contrib import admin\\nfrom django.urls import path\\nfrom django.urls import include\\n\\nurlpatterns = [\\n    path(\'admin/\', admin.site.urls),\\n    path(\'\', include(\'pages.urls\')),\\n]\\n```\\n\\n\\nand last:\\n\\n```\\npython manage.py runserver\\n```"},{"id":"MarkDown","metadata":{"permalink":"/blog/MarkDown","editUrl":"https://github.com/arteiii/arteiii.github.io/tree/main/blog/markdown_intro/markdown_intro.mdx","source":"@site/blog/markdown_intro/markdown_intro.mdx","title":"MarkDown Intro","description":"just a short intro to markdown and mdx","date":"2023-07-02T18:00:00.000Z","tags":[],"readingTime":2.5566666666666666,"hasTruncateMarker":true,"authors":[{"name":"Evan Tay","title":"Final year Computer Science major at NUS","url":"https://github.com/DigiPie","imageURL":"https://avatars2.githubusercontent.com/u/13582874","key":"evantay","page":null},{"name":"Arteii","url":"https://github.com/arteiii","imageURL":"https://avatars.githubusercontent.com/u/48642527","key":"arteii","page":null}],"frontMatter":{"slug":"MarkDown","title":"MarkDown Intro","authors":["evantay","arteii"],"keywords":["Markdown","MDX","Docusaurus"],"date":"2023-07-02T18:00"},"unlisted":false,"prevItem":{"title":"Django101 Hello World!","permalink":"/blog/django101"}},"content":"just a short intro to markdown and mdx\\nfor docusaurus or different tools / websites\\n\\n---\\n\\n\\nYou can write content using [GitHub-flavored Markdown syntax](https://github.github.com/gfm/).\\n\\nTo serve as an example page when styling markdown based Docusaurus sites.\\n\\n\x3c!--truncate--\x3e\\n\\n## Headers\\n\\n---\\n\\n# H1 - Create the best documentation\\n\\n## H2 - Create the best documentation\\n\\n### H3 - Create the best documentation\\n\\n#### H4 - Create the best documentation\\n\\n##### H5 - Create the best documentation\\n\\n###### H6 - Create the best documentation\\n\\n\\n## Emphasis\\n\\n---\\n\\nEmphasis, aka italics, with _asterisks_ or _underscores_.\\n\\nStrong emphasis, aka bold, with **asterisks** or **underscores**.\\n\\nCombined emphasis with **asterisks and _underscores_**.\\n\\nStrikethrough uses two tildes. ~~Scratch this.~~\\n\\n## Lists\\n\\n---\\n\\n1. First ordered list item\\n2. Another item\\n- Unordered sub-list.\\n3. Actual numbers don\'t matter, just that it\'s a number\\n1. Ordered sub-list\\n4. And another item.\\n\\n- Unordered list can use asterisks\\n\\n* Or minuses\\n\\n- Or pluses\\n\\n\\n## Links\\n\\n---\\n\\n[I\'m an inline-style link](https://www.google.com/)\\n\\n[I\'m an inline-style link with title](https://www.google.com/ \\"Google\'s Homepage\\")\\n\\n[I\'m a reference-style link][arbitrary case-insensitive reference text]\\n\\n[You can use numbers for reference-style link definitions][1]\\n\\nOr leave it empty and use the [link text itself].\\n\\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com/ or http://www.example.com/ and sometimes example.com (but not on GitHub, for example).\\n\\nSome text to show that the reference links can follow later.\\n\\n[arbitrary case-insensitive reference text]  https://www.mozilla.org/\\n[1]  http://slashdot.org/\\n[link text itself]  http://www.reddit.com/\\n\\n\\n\\n## Images\\n\\n---\\n\\n\\n\\nyou can import assets and use them like this: (only if you use mdx)\\n\\n```jsx\\nimport myImageUrl from \\"../../static/img/Website-Social-Card.jpeg\\";\\n\\n<img src={myImageUrl} width={250} height={250} alt=\\"Example banner\\" />;\\n```\\n\\n\\n\\n\\nimport Logo from \\"../../static/img/Website-Social-Card.jpeg\\";\\nimport Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\n<img src={Logo} width={250} height={250} alt=\\"Example banner\\"/>\\n\\n\\n---\\n\\nInline-style:\\n\\n![alt text](https://arteiii.github.io/img/Website-Social-Card.jpeg \\"Logo Title Text 1\\")\\n\\n---\\n\\nReference-style: ![alt text][logo]\\n\\n[logo]  https://arteiii.github.io/img/Website-Social-Card.jpeg \\"Logo Title Text 2\\"\\n\\nImages from any folder can be used by providing path to file. Path should be relative to markdown file.\\n\\n\\n\\n## Code\\n\\n---\\n\\n```javascript\\nvar s = \\"JavaScript syntax highlighting\\";\\nalert(s);\\n```\\n\\n```python\\ns = \\"Python syntax highlighting\\"\\nprint(s)\\n```\\n\\n```\\nNo language indicated, so no syntax highlighting.\\nBut let\'s throw in a <b>tag</b>.\\n```\\n\\n```js {2}\\nvar highlightMe = function (){\\n  console.log(\\"This line can be highlighted!\\");\\n};\\n```\\n\\n\\nyou can also set titles\\n\\n````\\n```python title=\\"example title\\"\\ns = \\"Python syntax highligh...\\n````\\n\\n```python title=\\"example title\\"\\ns = \\"Python syntax highlighting\\"\\nprint(s)\\n```\\n\\n\\n\\n## Tables\\n\\n---\\n\\nColons can be used to align columns.\\n\\n| Tables        |      Are      |   Cool |\\n|---------------|:-------------:|-------:|\\n| col 3 is      | right-aligned | \\\\$1600 |\\n| col 2 is      |   centered    |   \\\\$12 |\\n| zebra stripes |   are neat    |    \\\\$1 |\\n\\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\'t need to make the raw Markdown line up prettily. You can also use inline Markdown.\\n\\n| Markdown | Less      | Pretty     |\\n|----------|-----------|------------|\\n| _Still_  | `renders` | **nicely** |\\n| 1        | 2         | 3          |\\n\\n\\n\\n## Blockquotes\\n\\n---\\n\\n> Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.\\n\\nQuote break.\\n\\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let\'s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can _put_ **Markdown** into a blockquote.\\n\\n\\n\\n## Inline HTML\\n\\n---\\n\\n<dl>\\n    <dt>Definition list</dt>\\n    <dd>Is something people use sometimes.</dd>\\n\\n    <dt>Markdown in HTML</dt>\\n    <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\\n</dl>\\n\\n<br/>\\n\\n## Line Breaks\\n\\n---\\n\\nHere\'s a line for us to start with.\\n\\nThis line is separated from the one above by two newlines, so it will be a _separate paragraph_.\\n\\nThis line is also a separate paragraph, but... This line is only separated by a single newline, so it\'s a separate line in the _same paragraph_.\\n\\n<br/>\\n\\n## Admonitions\\n\\n---\\n\\n:::note\\n\\nThis is a note\\n\\n:::\\n\\n:::tip\\n\\nThis is a tip\\n\\n:::\\n\\n:::important\\n\\nThis is important\\n\\n:::\\n\\n:::caution\\n\\nThis is a caution\\n\\n:::\\n\\n:::warning\\n\\nThis is a warning\\n\\n:::\\n\\n\\n## MDX\\n\\n---\\n\\nlets you use jsx in markdown\\n\\n[read more](https://mdxjs.com/)\\n\\n\\n### Tabs\\n\\n---\\n\\n[**read docu**](https://docusaurus.io/docs/markdown-features/tabs)\\n\\n```mdx\\nimport Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\n<Tabs>\\n  <TabItem value=\\"apple\\" label=\\"Apple\\" default>\\n    This is an apple \ud83c\udf4e\\n  </TabItem>\\n  <TabItem value=\\"orange\\" label=\\"Orange\\">\\n    This is an orange \ud83c\udf4a\\n  </TabItem>\\n  <TabItem value=\\"banana\\" label=\\"Banana\\">\\n    This is a banana \ud83c\udf4c\\n  </TabItem>\\n</Tabs>\\n```\\n\\n\\n\\n\\n<Tabs>\\n    <TabItem value=\\"apple\\" label=\\"Apple\\" default>\\n        This is an apple \ud83c\udf4e\\n    </TabItem>\\n    <TabItem value=\\"orange\\" label=\\"Orange\\">\\n        This is an orange \ud83c\udf4a\\n    </TabItem>\\n    <TabItem value=\\"banana\\" label=\\"Banana\\">\\n        This is a banana \ud83c\udf4c\\n    </TabItem>\\n</Tabs>"}]}}')}}]);