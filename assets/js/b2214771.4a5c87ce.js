"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[3687],{9663:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=n(4848),s=n(8453);const r={sidebar_position:1,sidebar_label:"x86-64"},t="x86-64",a={id:"cheatsheets/Assembly/x86-64",title:"x86-64",description:"Registers",source:"@site/docs/cheatsheets/Assembly/x86-64.md",sourceDirName:"cheatsheets/Assembly",slug:"/cheatsheets/Assembly/x86-64",permalink:"/docs/cheatsheets/Assembly/x86-64",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/cheatsheets/Assembly/x86-64.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"x86-64"},sidebar:"docsSidebar",previous:{title:"Assembly",permalink:"/docs/cheatsheets/Assembly/"},next:{title:"Open Source Licenses",permalink:"/docs/cheatsheets/licenses/"}},d={},c=[{value:"Registers",id:"registers",level:2},{value:"General Purpose Registers (64-bit)",id:"general-purpose-registers-64-bit",level:3},{value:"Segment Registers",id:"segment-registers",level:3},{value:"Index Registers",id:"index-registers",level:3},{value:"Data Movement",id:"data-movement",level:2},{value:"MOV: Move data between registers or memory",id:"mov-move-data-between-registers-or-memory",level:3},{value:"Arithmetic and Logic",id:"arithmetic-and-logic",level:2},{value:"ADD, SUB, IMUL, IDIV, INC, DEC",id:"add-sub-imul-idiv-inc-dec",level:3},{value:"AND, OR, XOR, NOT",id:"and-or-xor-not",level:3},{value:"Control Flow",id:"control-flow",level:2},{value:"JMP, JE (Jump if Equal), JNE (Jump if Not Equal), JG, JL, JGE, JLE",id:"jmp-je-jump-if-equal-jne-jump-if-not-equal-jg-jl-jge-jle",level:3},{value:"CALL, RET",id:"call-ret",level:3},{value:"Comparison",id:"comparison",level:2},{value:"CMP: Compare two values",id:"cmp-compare-two-values",level:3},{value:"Stack",id:"stack",level:2},{value:"PUSH, POP",id:"push-pop",level:3},{value:"System Calls",id:"system-calls",level:2},{value:"SYSCALL",id:"syscall",level:3},{value:"Example Code",id:"example-code",level:2}];function o(e){const l={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.header,{children:(0,i.jsx)(l.h1,{id:"x86-64",children:"x86-64"})}),"\n",(0,i.jsx)(l.h2,{id:"registers",children:"Registers"}),"\n",(0,i.jsx)(l.h3,{id:"general-purpose-registers-64-bit",children:"General Purpose Registers (64-bit)"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"RAX, RBX, RCX, RDX"}),"\n",(0,i.jsx)(l.li,{children:"RSI, RDI, RBP, RSP"}),"\n",(0,i.jsx)(l.li,{children:"R8-R15"}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"segment-registers",children:"Segment Registers"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"CS, DS, ES, FS, GS, SS"}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"index-registers",children:"Index Registers"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"RSI (Source Index)"}),"\n",(0,i.jsx)(l.li,{children:"RDI (Destination Index)"}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"data-movement",children:"Data Movement"}),"\n",(0,i.jsx)(l.h3,{id:"mov-move-data-between-registers-or-memory",children:"MOV: Move data between registers or memory"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"MOV reg, imm"}),"\n",(0,i.jsx)(l.li,{children:"MOV reg, mem"}),"\n",(0,i.jsx)(l.li,{children:"MOV mem, reg"}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"arithmetic-and-logic",children:"Arithmetic and Logic"}),"\n",(0,i.jsx)(l.h3,{id:"add-sub-imul-idiv-inc-dec",children:"ADD, SUB, IMUL, IDIV, INC, DEC"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"ADD dest, src"}),"\n",(0,i.jsx)(l.li,{children:"SUB dest, src"}),"\n",(0,i.jsx)(l.li,{children:"IMUL dest, src (signed multiplication)"}),"\n",(0,i.jsx)(l.li,{children:"IDIV divisor (signed division)"}),"\n",(0,i.jsx)(l.li,{children:"INC reg/mem, DEC reg/mem"}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"and-or-xor-not",children:"AND, OR, XOR, NOT"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"AND dest, src"}),"\n",(0,i.jsx)(l.li,{children:"OR dest, src"}),"\n",(0,i.jsx)(l.li,{children:"XOR dest, src"}),"\n",(0,i.jsx)(l.li,{children:"NOT reg/mem"}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"control-flow",children:"Control Flow"}),"\n",(0,i.jsx)(l.h3,{id:"jmp-je-jump-if-equal-jne-jump-if-not-equal-jg-jl-jge-jle",children:"JMP, JE (Jump if Equal), JNE (Jump if Not Equal), JG, JL, JGE, JLE"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"JMP label"}),"\n",(0,i.jsx)(l.li,{children:"JE label"}),"\n",(0,i.jsx)(l.li,{children:"JNE label"}),"\n",(0,i.jsx)(l.li,{children:"JG label (greater)"}),"\n",(0,i.jsx)(l.li,{children:"JL label (less)"}),"\n",(0,i.jsx)(l.li,{children:"JGE label (greater or equal)"}),"\n",(0,i.jsx)(l.li,{children:"JLE label (less or equal)"}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"call-ret",children:"CALL, RET"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"CALL procedure"}),"\n",(0,i.jsx)(l.li,{children:"RET"}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"comparison",children:"Comparison"}),"\n",(0,i.jsx)(l.h3,{id:"cmp-compare-two-values",children:"CMP: Compare two values"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"CMP operand1, operand2"}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"stack",children:"Stack"}),"\n",(0,i.jsx)(l.h3,{id:"push-pop",children:"PUSH, POP"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"PUSH reg/mem"}),"\n",(0,i.jsx)(l.li,{children:"POP reg/mem"}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"system-calls",children:"System Calls"}),"\n",(0,i.jsx)(l.h3,{id:"syscall",children:"SYSCALL"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"Used for making system calls in x64 assembly."}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"example-code",children:"Example Code"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-asm6502",children:"section .data\n  my_variable dq 42           ; Define a 64-bit variable with initial value 42\n\nsection .text\nglobal _start\n\n_start:\n  MOV RAX, my_variable      ; Load my_variable into RAX\n  ADD RAX, 8                ; Add 8 to RAX\n  MOV RBX, 10               ; Load 10 into RBX\n  CMP RAX, RBX              ; Compare RAX and RBX\n  JE  equal_label           ; Jump to equal_label if RAX equals RBX\n  JNE not_equal_label       ; Jump to not_equal_label if RAX doesn't equal RBX\n\nequal_label:\n  ; Code to execute if RAX equals RBX\n  JMP end_label             ; Jump to end_label\n\nnot_equal_label:\n  ; Code to execute if RAX doesn't equal RBX\n\nend_label:\n  ; Code to execute at the end of the program\n  MOV RAX, 60               ; syscall: exit\n  XOR RDI, RDI              ; status: 0\n  SYSCALL\n"})})]})}function h(e={}){const{wrapper:l}={...(0,s.R)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>t,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function t(e){const l=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function a(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(r.Provider,{value:l},e.children)}}}]);