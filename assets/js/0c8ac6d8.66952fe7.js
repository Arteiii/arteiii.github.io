"use strict";(self.webpackChunkarteiii_github_io=self.webpackChunkarteiii_github_io||[]).push([[9518],{798:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var s=i(4848),t=i(8453);const r={sidebar_position:17},l="Strings",a={id:"python/strings",title:"Strings",description:"Splitting",source:"@site/docs/python/strings.md",sourceDirName:"python",slug:"/python/strings",permalink:"/docs/python/strings",draft:!1,unlisted:!1,editUrl:"https://github.com/arteiii/arteiii.github.io/tree/main/docs/python/strings.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17},sidebar:"docsSidebar",previous:{title:"Global And Local Variables",permalink:"/docs/python/global_local_var"},next:{title:"Exceptions",permalink:"/docs/python/exceptions"}},d={},h=[{value:"Splitting",id:"splitting",level:2},{value:"split",id:"split",level:3},{value:"maxsplit",id:"maxsplit",level:3},{value:"rsplit",id:"rsplit",level:3},{value:"splitlines",id:"splitlines",level:3},{value:"partition",id:"partition",level:3},{value:"join",id:"join",level:2},{value:"Substring",id:"substring",level:2},{value:"&quot;in&quot; or &quot;not in&quot;",id:"in-or-not-in",level:3},{value:"s.find ( substring [ , start [ , end ] ] )",id:"sfind--substring---start---end---",level:3},{value:"s.rfind ( substring [ , start [ , end ] ] )",id:"srfind--substring---start---end---",level:3},{value:"s.index/rindex ( substring [ , start [ , end ] ] )",id:"sindexrindex--substring---start---end---",level:3},{value:"s.count ( substring [ , start [ , end ] ] )",id:"scount--substring---start---end---",level:3},{value:"Search and Replace",id:"search-and-replace",level:2},{value:"Lowercase and Uppercase",id:"lowercase-and-uppercase",level:2},{value:"Capitalize &amp; Title",id:"capitalize--title",level:2},{value:"Striping Strings",id:"striping-strings",level:2},{value:"Align Strings",id:"align-strings",level:2},{value:"String-Test",id:"string-test",level:2},{value:"s.isalnum()",id:"sisalnum",level:3},{value:"s.isalpha()",id:"sisalpha",level:3},{value:"s.isdigit()",id:"sisdigit",level:3},{value:"s.islower()",id:"sislower",level:3},{value:"s.isupper()",id:"sisupper",level:3},{value:"s.isspace()",id:"sisspace",level:3},{value:"s.istitle()",id:"sistitle",level:3}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"strings",children:"Strings"})}),"\n",(0,s.jsx)(e.h2,{id:"splitting",children:"Splitting"}),"\n",(0,s.jsx)(e.p,{children:"python offers several functions for splitting out a string"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#split",children:"split"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#rsplit",children:"rsplit"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#splitlines",children:"splitlines"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#partition",children:"partition"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#partition",children:"rpartition"})}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"split",children:"split"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"string123 = \"\"\"Everybody is a genius.\nBut if you judge a fish by its ability to climb a tree,\nit will live its whole life believing that it is stupid.\"\"\"\n\nstring123.split()\n# ['Everybody', 'is', 'a', 'genius.', 'But', 'if'\u2026\n"})}),"\n",(0,s.jsx)(e.p,{children:"you can also define the separation character"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"string123 = \"\"\"Everybody;is;a;genius.\n;But;if you judge;a fish by its ability to climb a tree,\n it will live its whole life believing that it is stupid.\"\"\"\n\nstring123.split(';')\n# ['Everybody', 'is', 'a', 'genius.',\n# 'But', 'if you judge', 'a fish by its ability\u2026\n"})}),"\n",(0,s.jsx)(e.h3,{id:"maxsplit",children:"maxsplit"}),"\n",(0,s.jsx)(e.p,{children:"with maxsplit you can define how often a string should be split starting from left"}),"\n",(0,s.jsxs)(e.p,{children:["you do not want to specify a separating character",(0,s.jsx)("br",{}),"\nyou can put None in the place"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"string123 = \"\"\"Everybody is a genius.\nBut if you judge a fish by its ability\"\"\"\n\nstring123.split(None, 4)\n# ['Everybody', 'is', 'a', 'genius.',\n# 'But if you judge a fish by its ability']\n"})}),"\n",(0,s.jsx)(e.h3,{id:"rsplit",children:"rsplit"}),"\n",(0,s.jsx)(e.p,{children:"rsplit works basically like split with the small difference that it does not start from the left but from the right."}),"\n",(0,s.jsx)(e.p,{children:"if no parameter is specified for maxsplit the result of split and rsplit do not differ"}),"\n",(0,s.jsx)(e.h3,{id:"splitlines",children:"splitlines"}),"\n",(0,s.jsx)(e.p,{children:"splitlines splits a text with line delimiters (\\n, \\r...)\ninto a list of lines"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"s = \"line1\\nline2\\nline3\\nline4\\nline5\\nline6\\n\"\ns.splitlines()\n# ['line1', 'line2', 'line3', 'line4', 'line5', 'line6']\n"})}),"\n",(0,s.jsx)(e.h3,{id:"partition",children:"partition"}),"\n",(0,s.jsx)(e.p,{children:'with "partition" a string can be split from left to right at the first partial operator'}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"veni = \"Veni, vidi, vici.\"\nveni.partition(\",\")\n# ('Veni', ',', ' vidi, vici.')\n\nveni = \"Veni, vidi, vici.\"\nveni.rpartition(\",\")\n# ('Veni, vidi', ',', ' vici.')\n"})}),"\n",(0,s.jsx)(e.h2,{id:"join",children:"join"}),"\n",(0,s.jsx)(e.p,{children:"s.join ( iterable )"}),"\n",(0,s.jsx)(e.p,{children:'"iterable" are joined in such a way that the string (s) is placed between the elements.'}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'x = ["veni", "vidi", "vici"]\n"-".join(x)\n# \'veni-vidi-vici\'\n\nx = "1337123"\n".".join(x)\n# \'1.3.3.7.3.6.9\'\n'})}),"\n",(0,s.jsx)(e.h2,{id:"substring",children:"Substring"}),"\n",(0,s.jsx)(e.h3,{id:"in-or-not-in",children:'"in" or "not in"'}),"\n",(0,s.jsx)(e.p,{children:"in is well suited to test if a substring occurs"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'stringus = \'\u201cBe the change that you wish to see in the world.\u201d \u2015 Mahatma Gandhi\'\n\n"Gandhi" in stringus\n# True\n\n"Gandhi" not in stringus\n# False\n'})}),"\n",(0,s.jsx)(e.h3,{id:"sfind--substring---start---end---",children:"s.find ( substring [ , start [ , end ] ] )"}),"\n",(0,s.jsxs)(e.p,{children:["find returns the value -1 if the substring does not occur",(0,s.jsx)("br",{}),"\notherwise it returns the position from which the substring begins"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'stringus = \'\u201cBe the change that you wish to see in the world.\u201d \u2015 Mahatma Gandhi\'\n\nstringus.find("ou")\n# 21\n\nstringus.find("not")\n# -1\n'})}),"\n",(0,s.jsx)(e.p,{children:"with the parameters start and end you can specify which area of a string is searched for"}),"\n",(0,s.jsx)(e.h3,{id:"srfind--substring---start---end---",children:"s.rfind ( substring [ , start [ , end ] ] )"}),"\n",(0,s.jsxs)(e.p,{children:["rfind works like find only that the search starts from the right side",(0,s.jsx)("br",{}),"\nhowever the output is not counted from the right/end of the string"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"stringus = '\u201cBe the change that you wish to see in the world.\u201d\\n \u2015 Mahatma Gandhi you'\n\nstringus.rfind(\"you\")\n# 69\n"})}),"\n",(0,s.jsx)(e.h3,{id:"sindexrindex--substring---start---end---",children:"s.index/rindex ( substring [ , start [ , end ] ] )"}),"\n",(0,s.jsx)(e.p,{children:"works exactly like find/rfind only if the substring is not included an error is returned"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'stringus = \'\u201cBe the change that you wish to see in the world.\u201d\\n \u2015 Mahatma Gandhi you\'\n\nstringus.index("you")\n# 20\n\nstringus.rindex("Be", 5)\n# Traceback (most recent call last):\n#   File "<stdin>", line 1, in <module>\n# ValueError: substring not found\n'})}),"\n",(0,s.jsx)(e.h3,{id:"scount--substring---start---end---",children:"s.count ( substring [ , start [ , end ] ] )"}),"\n",(0,s.jsx)(e.p,{children:"count counts the occurrence of a substring"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'stringus = \'\u201cBe the change that you wish to see in the world.\u201d\\n \u2015 Mahatma Gandhi you\'\n\nstringus.count("e")\n# 6\n\nstringus.count("Mahatma")\n# 1\n'})}),"\n",(0,s.jsx)(e.h2,{id:"search-and-replace",children:"Search and Replace"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"s.replace ( old , new [ , count ] )"}),(0,s.jsx)("br",{}),"\nwithout count all occurrences of old are replaced by new"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'stringus = \'\u201cBe the change that you wish to see in the world.\u201d\\n \u2015 Mahatma Gandhi you\'\n\nstringus.replace("a", "b")\n# \'\u201cBe the chbnge thbt you \u2026\n\nstringus.replace("e", "123", 1)\n# \'\u201cB123 the change that you\u2026\n'})}),"\n",(0,s.jsx)(e.h2,{id:"lowercase-and-uppercase",children:"Lowercase and Uppercase"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"stringus = '\u201cBe the change that you wish to see in the world.\u201d\\n \u2015 Mahatma Gandhi you'\n\nstringus.lower()\n# '\u201cbe the change that you\u2026\n\nstringus.upper()\n# '\u201cBE THE CHANGE THAT YOU\u2026\n"})}),"\n",(0,s.jsx)(e.h2,{id:"capitalize--title",children:"Capitalize & Title"}),"\n",(0,s.jsx)(e.p,{children:"capitalize is a function which converts all letters except the first letter of a string into lowercase letters"}),"\n",(0,s.jsx)(e.p,{children:"title converts all letters that are not the first letters of a word to lowercase letters"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"stringus = 'hello \u201cBe the change that you wish to see in the world.\u201d\\n \u2015 Mahatma Gandhi you'\n\nstringus.capitalize()\n# 'Hello \u201cbe the change that you\u2026\n\nstringus.title()\n# 'Hello \u201cBe The Change That You\u2026\n"})}),"\n",(0,s.jsx)(e.h2,{id:"striping-strings",children:"Striping Strings"}),"\n",(0,s.jsx)(e.p,{children:"strip can be used to remove whitespaces or unwanted characters at the beginning of a string"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"stringus = '\\n \u201cBe the change\u201d\\n \u2015 Gandhi  \\n  '\n\nstringus.strip()\n# '\u201cBe the change\u201d\\n \u2015 Gandhi'\n\nstringus.rstrip()\n# '\\n \u201cBe the change\u201d\\n \u2015 Gandhi'\n\nstringus.lstrip()\n# '\u201cBe the change\u201d\\n \u2015 Gandhi  \\n  '\n\nstringus = \"1337Test\"\nstringus.strip(\"1337\")\n# 'Test'\n"})}),"\n",(0,s.jsx)(e.h2,{id:"align-strings",children:"Align Strings"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"s.center ( length [ , fillchar ] )"}),"\nthe string(s) will be filled with fillchar if fillchar is not set, blank characters will be used by default"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"stringus = '1337'\n\nstringus.center(20)\n# '        1337        '\n\n\nstringus.ljust(10)\n# '1337      '\n\nstringus.rjust(10)\n# '      1337'\n\nstringus = \"3.1415926\"\nstringus.zfill(15)\n# '0000003.1415926'\n"})}),"\n",(0,s.jsx)(e.p,{children:"zfill is especially for numerical values"}),"\n",(0,s.jsx)(e.h2,{id:"string-test",children:"String-Test"}),"\n",(0,s.jsx)(e.h3,{id:"sisalnum",children:"s.isalnum()"}),"\n",(0,s.jsx)(e.p,{children:"True if all characters in s are letters or numbers"}),"\n",(0,s.jsx)(e.h3,{id:"sisalpha",children:"s.isalpha()"}),"\n",(0,s.jsx)(e.p,{children:"True if all characters are letters"}),"\n",(0,s.jsx)(e.h3,{id:"sisdigit",children:"s.isdigit()"}),"\n",(0,s.jsx)(e.p,{children:"True if all characters are digits"}),"\n",(0,s.jsx)(e.h3,{id:"sislower",children:"s.islower()"}),"\n",(0,s.jsx)(e.p,{children:"True if all characters are in lowercase letters"}),"\n",(0,s.jsx)(e.h3,{id:"sisupper",children:"s.isupper()"}),"\n",(0,s.jsx)(e.p,{children:"True if all characters are in capital letters"}),"\n",(0,s.jsx)(e.h3,{id:"sisspace",children:"s.isspace()"}),"\n",(0,s.jsx)(e.p,{children:"True if all characters are whitespaces"}),"\n",(0,s.jsx)(e.h3,{id:"sistitle",children:"s.istitle()"}),"\n",(0,s.jsx)(e.p,{children:"True if all words are capitalized"})]})}function o(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function l(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);